{"ast":null,"code":"import * as yup from 'yup';\nfunction generateValidationSchema(fieldsConfig) {\n  var validationSchema = {};\n  var _loop = function _loop(fieldName) {\n    if (fieldsConfig.hasOwnProperty(fieldName)) {\n      var fieldRules = fieldsConfig[fieldName].rules;\n      if (Array.isArray(fieldRules) && fieldRules.length > 0) {\n        var fieldValidation = yup.string();\n        fieldRules.forEach(function (rule) {\n          switch (rule) {\n            case 'required':\n              fieldValidation = fieldValidation.required(`${fieldName} is required`);\n              break;\n            case 'email':\n              fieldValidation = fieldValidation.email(`${fieldName} must be a valid email address`);\n              break;\n            case 'minLength':\n              if (fieldsConfig[fieldName].minLength) {\n                fieldValidation = fieldValidation.min(fieldsConfig[fieldName].minLength, `${fieldName} must be at least ${fieldsConfig[fieldName].minLength} characters`);\n              }\n              break;\n            case 'maxLength':\n              if (fieldsConfig[fieldName].maxLength) {\n                fieldValidation = fieldValidation.max(fieldsConfig[fieldName].maxLength, `${fieldName} must be at most ${fieldsConfig[fieldName].maxLength} characters`);\n              }\n              break;\n          }\n        });\n        validationSchema[fieldName] = fieldValidation;\n      }\n    }\n  };\n  for (var fieldName in fieldsConfig) {\n    _loop(fieldName);\n  }\n  return yup.object().shape(validationSchema);\n}\nexport default generateValidationSchema;","map":{"version":3,"names":["yup","generateValidationSchema","fieldsConfig","validationSchema","_loop","fieldName","hasOwnProperty","fieldRules","rules","Array","isArray","length","fieldValidation","string","forEach","rule","required","email","minLength","min","maxLength","max","object","shape"],"sources":["/Users/sharmalperera/projects/apps/ExpoTemplateAppWithComponent/src/components/user-profile/generateValidationSchema.tsx"],"sourcesContent":["import * as yup from 'yup';\n\nfunction generateValidationSchema(fieldsConfig) {\n  const validationSchema = {};\n\n  for (const fieldName in fieldsConfig) {\n    if (fieldsConfig.hasOwnProperty(fieldName)) {\n      const fieldRules = fieldsConfig[fieldName].rules;\n\n      if (Array.isArray(fieldRules) && fieldRules.length > 0) {\n        // Initialize the validation schema for this field\n        let fieldValidation = yup.string();\n\n        // Apply rules\n        fieldRules.forEach((rule) => {\n          switch (rule) {\n            case 'required':\n              fieldValidation = fieldValidation.required(`${fieldName} is required`);\n              break;\n            case 'email':\n              fieldValidation = fieldValidation.email(`${fieldName} must be a valid email address`);\n              break;\n            case 'minLength':\n              if (fieldsConfig[fieldName].minLength) {\n                fieldValidation = fieldValidation.min(fieldsConfig[fieldName].minLength, `${fieldName} must be at least ${fieldsConfig[fieldName].minLength} characters`);\n              }\n              break;\n            case 'maxLength':\n              if (fieldsConfig[fieldName].maxLength) {\n                fieldValidation = fieldValidation.max(fieldsConfig[fieldName].maxLength, `${fieldName} must be at most ${fieldsConfig[fieldName].maxLength} characters`);\n              }\n              break;\n            // Add more rules as needed\n          }\n        });\n\n        // Set the validation schema for the field\n        validationSchema[fieldName] = fieldValidation;\n      }\n    }\n  }\n\n  return yup.object().shape(validationSchema);\n}\n\nexport default generateValidationSchema;\n"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,KAAK;AAE1B,SAASC,wBAAwBA,CAACC,YAAY,EAAE;EAC9C,IAAMC,gBAAgB,GAAG,CAAC,CAAC;EAAC,IAAAC,KAAA,YAAAA,MAAAC,SAAA,EAEU;IACpC,IAAIH,YAAY,CAACI,cAAc,CAACD,SAAS,CAAC,EAAE;MAC1C,IAAME,UAAU,GAAGL,YAAY,CAACG,SAAS,CAAC,CAACG,KAAK;MAEhD,IAAIC,KAAK,CAACC,OAAO,CAACH,UAAU,CAAC,IAAIA,UAAU,CAACI,MAAM,GAAG,CAAC,EAAE;QAEtD,IAAIC,eAAe,GAAGZ,GAAG,CAACa,MAAM,CAAC,CAAC;QAGlCN,UAAU,CAACO,OAAO,CAAC,UAACC,IAAI,EAAK;UAC3B,QAAQA,IAAI;YACV,KAAK,UAAU;cACbH,eAAe,GAAGA,eAAe,CAACI,QAAQ,CAAE,GAAEX,SAAU,cAAa,CAAC;cACtE;YACF,KAAK,OAAO;cACVO,eAAe,GAAGA,eAAe,CAACK,KAAK,CAAE,GAAEZ,SAAU,gCAA+B,CAAC;cACrF;YACF,KAAK,WAAW;cACd,IAAIH,YAAY,CAACG,SAAS,CAAC,CAACa,SAAS,EAAE;gBACrCN,eAAe,GAAGA,eAAe,CAACO,GAAG,CAACjB,YAAY,CAACG,SAAS,CAAC,CAACa,SAAS,EAAG,GAAEb,SAAU,qBAAoBH,YAAY,CAACG,SAAS,CAAC,CAACa,SAAU,aAAY,CAAC;cAC3J;cACA;YACF,KAAK,WAAW;cACd,IAAIhB,YAAY,CAACG,SAAS,CAAC,CAACe,SAAS,EAAE;gBACrCR,eAAe,GAAGA,eAAe,CAACS,GAAG,CAACnB,YAAY,CAACG,SAAS,CAAC,CAACe,SAAS,EAAG,GAAEf,SAAU,oBAAmBH,YAAY,CAACG,SAAS,CAAC,CAACe,SAAU,aAAY,CAAC;cAC1J;cACA;UAEJ;QACF,CAAC,CAAC;QAGFjB,gBAAgB,CAACE,SAAS,CAAC,GAAGO,eAAe;MAC/C;IACF;EACF,CAAC;EAnCD,KAAK,IAAMP,SAAS,IAAIH,YAAY;IAAAE,KAAA,CAAAC,SAAA;EAAA;EAqCpC,OAAOL,GAAG,CAACsB,MAAM,CAAC,CAAC,CAACC,KAAK,CAACpB,gBAAgB,CAAC;AAC7C;AAEA,eAAeF,wBAAwB"},"metadata":{},"sourceType":"module","externalDependencies":[]}