{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState, useEffect } from 'react';\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nexport function useOnMount(asyncGetter, initialResult) {\n  var _useState = useState({\n      loading: true,\n      result: initialResult\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    response = _useState2[0],\n    setResponse = _useState2[1];\n  useEffect(function () {\n    var getAsync = function () {\n      var _ref = _asyncToGenerator(function* () {\n        var result = yield asyncGetter();\n        setResponse({\n          loading: false,\n          result: result\n        });\n      });\n      return function getAsync() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    getAsync();\n  }, [asyncGetter]);\n  return response;\n}\nexport var deviceInfoEmitter = new NativeEventEmitter(NativeModules.RNDeviceInfo);\nexport function useOnEvent(eventName, initialValueAsyncGetter, defaultValue) {\n  var _useOnMount = useOnMount(initialValueAsyncGetter, defaultValue),\n    loading = _useOnMount.loading,\n    initialResult = _useOnMount.result;\n  var _useState3 = useState(defaultValue),\n    _useState4 = _slicedToArray(_useState3, 2),\n    result = _useState4[0],\n    setResult = _useState4[1];\n  useEffect(function () {\n    setResult(initialResult);\n  }, [initialResult]);\n  useEffect(function () {\n    var subscription = deviceInfoEmitter.addListener(eventName, setResult);\n    return function () {\n      return subscription.remove();\n    };\n  }, [eventName]);\n  return {\n    loading: loading,\n    result: result\n  };\n}","map":{"version":3,"names":["useState","useEffect","NativeEventEmitter","NativeModules","useOnMount","asyncGetter","initialResult","_useState","loading","result","_useState2","_slicedToArray","response","setResponse","getAsync","_ref","_asyncToGenerator","apply","arguments","deviceInfoEmitter","RNDeviceInfo","useOnEvent","eventName","initialValueAsyncGetter","defaultValue","_useOnMount","_useState3","_useState4","setResult","subscription","addListener","remove"],"sources":["/Users/sharmalperera/projects/apps/ExpoTemplateAppWithComponent/node_modules/react-native-device-info/lib/module/internal/asyncHookWrappers.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { NativeEventEmitter, NativeModules } from 'react-native';\nimport type { AsyncHookResult } from './types';\n\n/**\n * simple hook wrapper for async functions for 'on-mount / componentDidMount' that only need to fired once\n * @param asyncGetter async function that 'gets' something\n * @param initialResult -1 | false | 'unknown'\n */\nexport function useOnMount<T>(asyncGetter: () => Promise<T>, initialResult: T): AsyncHookResult<T> {\n  const [response, setResponse] = useState<AsyncHookResult<T>>({\n    loading: true,\n    result: initialResult,\n  });\n\n  useEffect(() => {\n    // async function cuz react complains if useEffect's effect param is an async function\n    const getAsync = async () => {\n      const result = await asyncGetter();\n      setResponse({ loading: false, result });\n    };\n\n    getAsync();\n  }, [asyncGetter]);\n\n  return response;\n}\n\nexport const deviceInfoEmitter = new NativeEventEmitter(NativeModules.RNDeviceInfo);\n\n/**\n * simple hook wrapper for handling events\n * @param eventName\n * @param initialValueAsyncGetter\n * @param defaultValue\n */\nexport function useOnEvent<T>(\n  eventName: string,\n  initialValueAsyncGetter: () => Promise<T>,\n  defaultValue: T\n): AsyncHookResult<T> {\n  const { loading, result: initialResult } = useOnMount(initialValueAsyncGetter, defaultValue);\n  const [result, setResult] = useState<T>(defaultValue);\n\n  // sets the result to what the intial value is on mount\n  useEffect(() => {\n    setResult(initialResult);\n  }, [initialResult]);\n\n  // - set up the event listener to set the result\n  // - set up the clean up function to remove subscription on unmount\n  useEffect(() => {\n    const subscription = deviceInfoEmitter.addListener(eventName, setResult);\n    return () => subscription.remove();\n  }, [eventName]);\n\n  // loading will only be true while getting the inital value. After that, it will always be false, but a new result may occur\n  return { loading, result };\n}\n"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAAA,OAAAC,kBAAA;AAAA,OAAAC,aAAA;AASA,OAAO,SAASC,UAATA,CAAuBC,WAAvB,EAAsDC,aAAtD,EAA4F;EACjG,IAAAC,SAAA,GAAgCP,QAAQ,CAAqB;MAC3DQ,OAAO,EAAE,IADkD;MAE3DC,MAAM,EAAEH;IAFmD,CAArB,CAAxC;IAAAI,UAAA,GAAAC,cAAA,CAAAJ,SAAA;IAAOK,QAAD,GAAAF,UAAA;IAAWG,WAAX,GAAAH,UAAA;EAKNT,SAAS,CAAC,YAAM;IAEd,IAAMa,QAAQ;MAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;QAC3B,IAAMP,MAAM,SAASJ,WAAW,EAAhC;QACAQ,WAAW,CAAC;UAAEL,OAAO,EAAE,KAAX;UAAkBC,MAAA,EAAAA;QAAlB,CAAD,CAAX;MACD,CAHD;MAAA,gBAAMK,QAAQA,CAAA;QAAA,OAAAC,IAAA,CAAAE,KAAA,OAAAC,SAAA;MAAA;IAAA,GAAd;IAKAJ,QAAQ;EACT,CARQ,EAQN,CAACT,WAAD,CARM,CAAT;EAUA,OAAOO,QAAP;AACD;AAED,OAAO,IAAMO,iBAAiB,GAAG,IAAIjB,kBAAJ,CAAuBC,aAAa,CAACiB,YAArC,CAA1B;AAQP,OAAO,SAASC,UAATA,CACLC,SADK,EAELC,uBAFK,EAGLC,YAHK,EAIe;EACpB,IAAAC,WAAA,GAA2CrB,UAAU,CAACmB,uBAAD,EAA0BC,YAA1B,CAArD;IAAQhB,OAAF,GAAAiB,WAAA,CAAEjB,OAAF;IAAmBF,aAAA,GAAAmB,WAAA,CAARhB,MAAM;EACvB,IAAAiB,UAAA,GAA4B1B,QAAQ,CAAIwB,YAAJ,CAApC;IAAAG,UAAA,GAAAhB,cAAA,CAAAe,UAAA;IAAOjB,MAAD,GAAAkB,UAAA;IAASC,SAAT,GAAAD,UAAA;EAGN1B,SAAS,CAAC,YAAM;IACd2B,SAAS,CAACtB,aAAD,CAAT;EACD,CAFQ,EAEN,CAACA,aAAD,CAFM,CAAT;EAMAL,SAAS,CAAC,YAAM;IACd,IAAM4B,YAAY,GAAGV,iBAAiB,CAACW,WAAlB,CAA8BR,SAA9B,EAAyCM,SAAzC,CAArB;IACA,OAAO;MAAA,OAAMC,YAAY,CAACE,MAAb,EAAb;IAAA;EACD,CAHQ,EAGN,CAACT,SAAD,CAHM,CAAT;EAMA,OAAO;IAAEd,OAAF,EAAEA,OAAF;IAAWC,MAAA,EAAAA;EAAX,CAAP;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}