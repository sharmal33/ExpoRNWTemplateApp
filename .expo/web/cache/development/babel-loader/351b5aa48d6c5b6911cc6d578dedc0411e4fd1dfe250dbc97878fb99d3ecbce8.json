{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar _class;\nimport { authApiClient } from \"./api-clients/AuthApiClient\";\nvar AuthService = function () {\n  function AuthService() {\n    _classCallCheck(this, AuthService);\n    this._configs = void 0;\n  }\n  _createClass(AuthService, [{\n    key: \"configure\",\n    value: function configure(configs) {\n      this._configs = configs;\n    }\n  }, {\n    key: \"getLocale\",\n    value: function getLocale() {\n      if (this._configs) {\n        return this._configs.locale;\n      }\n    }\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = _asyncToGenerator(function* (username, password) {\n        try {\n          var _ref = this._configs || {},\n            appId = _ref.appId,\n            codeChallenge = _ref.codeChallenge,\n            redirectUrl = _ref.redirectUrl,\n            codeVerifier = _ref.codeVerifier;\n          var authApiClientInstance = authApiClient.getApiClient();\n          var authResponse = yield authApiClientInstance.get(`/as/authorize?response_type=code&client_id=${appId}&scope=profilepsf&code_challenge=${codeChallenge}&code_challenge_method=S256&acr_values=Single_Factor&response_mode=pi.flow`);\n          var flowId = authResponse.data.id;\n          var loginResponse = yield authApiClientInstance.post(`/flows/${flowId}`, {\n            username: username,\n            password: password\n          }, {\n            headers: {\n              'Content-Type': 'application/vnd.pingidentity.usernamePassword.check+json'\n            }\n          });\n          var resumeUrl = loginResponse.data.resumeUrl;\n          var resumeResponse = yield authApiClientInstance.get(resumeUrl);\n          var authCode = resumeResponse.data.authorizeResponse.code;\n          var tokenResponse = yield authApiClientInstance.post('/as/token', {\n            grant_type: 'authorization_code',\n            code: authCode,\n            client_id: appId,\n            scope: 'openid profilepsf',\n            code_verifier: codeVerifier\n          }, {\n            headers: {\n              'Content-Type': 'application/x-www-form-urlencoded'\n            }\n          });\n          var access_token = tokenResponse.data.access_token;\n          return {\n            access_token: access_token\n          };\n        } catch (error) {\n          throw new Error('Authentication failed', error);\n        }\n      });\n      function login(_x, _x2) {\n        return _login.apply(this, arguments);\n      }\n      return login;\n    }()\n  }], [{\n    key: \"instance\",\n    get: function get() {\n      if (!this._instance) {\n        this._instance = new AuthService();\n      }\n      return this._instance;\n    }\n  }]);\n  return AuthService;\n}();\n_class = AuthService;\nAuthService._instance = void 0;\nexport var authService = AuthService.instance;","map":{"version":3,"names":["authApiClient","AuthService","_classCallCheck","_configs","_createClass","key","value","configure","configs","getLocale","locale","_login","_asyncToGenerator","username","password","_ref","appId","codeChallenge","redirectUrl","codeVerifier","authApiClientInstance","getApiClient","authResponse","get","flowId","data","id","loginResponse","post","headers","resumeUrl","resumeResponse","authCode","authorizeResponse","code","tokenResponse","grant_type","client_id","scope","code_verifier","access_token","error","Error","login","_x","_x2","apply","arguments","_instance","_class","authService","instance"],"sources":["/Users/sharmalperera/projects/apps/ExpoTemplateAppWithComponent/node_modules/react-native-auth-component/src/services/AuthService.tsx"],"sourcesContent":["// AuthService.ts\nimport { authApiClient } from './api-clients/AuthApiClient';\n\nclass AuthService {\n  private static _instance: AuthService;\n  private _configs?: any;\n\n\n  private constructor() {}\n\n  public configure(configs: any) {\n    this._configs = configs;\n  }\n\n  public getLocale() {\n    if (this._configs) {\n      return this._configs.locale;\n    }\n  }\n\n  public static get instance(): AuthService {\n    if (!this._instance) {\n      this._instance = new AuthService();\n    }\n    return this._instance;\n  }\n\n  public async login(username: string, password: string) {\n    try {\n      const { appId, codeChallenge,redirectUrl,codeVerifier } = this._configs || {};\n      // Step 1: Authorize\n      const authApiClientInstance = authApiClient.getApiClient(); // Get the Axios instance\n      const authResponse = await authApiClientInstance.get(\n        `/as/authorize?response_type=code&client_id=${appId}&scope=profilepsf&code_challenge=${codeChallenge}&code_challenge_method=S256&acr_values=Single_Factor&response_mode=pi.flow`\n      );\n\n      // get authResponse flowId\n      const flowId = authResponse.data.id;\n\n      // Step 2: Login\n      const loginResponse = await authApiClientInstance.post(`/flows/${flowId}`, {\n        username: username,\n        password: password,\n      },{\n        headers: {\n          'Content-Type': 'application/vnd.pingidentity.usernamePassword.check+json',\n        },\n      });\n\n      // get loginResponse resumeUrl\n      const resumeUrl = loginResponse.data.resumeUrl;\n\n      // Step 3: Resume\n      const resumeResponse = await authApiClientInstance.get(resumeUrl);\n\n      // get resumeResponse authCode\n      const authCode = resumeResponse.data.authorizeResponse.code;\n\n      // Step 4: Token\n      const tokenResponse = await authApiClientInstance.post('/as/token', {\n        grant_type: 'authorization_code',\n        code: authCode,\n        client_id: appId,\n        scope: 'openid profilepsf',\n        code_verifier: codeVerifier,\n      },{\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n      });\n\n      // get tokenResponse access_token\n      const { access_token } = tokenResponse.data;\n      return { access_token };\n    } catch (error) {\n      throw new Error('Authentication failed', error);\n    }\n  }\n}\n\nexport const authService = AuthService.instance;\n"],"mappings":";;;;AACA,SAASA,aAAa;AAAsC,IAEtDC,WAAW;EAKf,SAAAA,YAAA,EAAsB;IAAAC,eAAA,OAAAD,WAAA;IAAA,KAHdE,QAAQ;EAGO;EAACC,YAAA,CAAAH,WAAA;IAAAI,GAAA;IAAAC,KAAA,EAExB,SAAAC,UAAiBC,OAAY,EAAE;MAC7B,IAAI,CAACL,QAAQ,GAAGK,OAAO;IACzB;EAAC;IAAAH,GAAA;IAAAC,KAAA,EAED,SAAAG,UAAA,EAAmB;MACjB,IAAI,IAAI,CAACN,QAAQ,EAAE;QACjB,OAAO,IAAI,CAACA,QAAQ,CAACO,MAAM;MAC7B;IACF;EAAC;IAAAL,GAAA;IAAAC,KAAA;MAAA,IAAAK,MAAA,GAAAC,iBAAA,CASD,WAAmBC,QAAgB,EAAEC,QAAgB,EAAE;QACrD,IAAI;UACF,IAAAC,IAAA,GAA0D,IAAI,CAACZ,QAAQ,IAAI,CAAC,CAAC;YAArEa,KAAK,GAAAD,IAAA,CAALC,KAAK;YAAEC,aAAa,GAAAF,IAAA,CAAbE,aAAa;YAACC,WAAW,GAAAH,IAAA,CAAXG,WAAW;YAACC,YAAY,GAAAJ,IAAA,CAAZI,YAAY;UAErD,IAAMC,qBAAqB,GAAGpB,aAAa,CAACqB,YAAY,CAAC,CAAC;UAC1D,IAAMC,YAAY,SAASF,qBAAqB,CAACG,GAAG,CACjD,8CAA6CP,KAAM,oCAAmCC,aAAc,4EACvG,CAAC;UAGD,IAAMO,MAAM,GAAGF,YAAY,CAACG,IAAI,CAACC,EAAE;UAGnC,IAAMC,aAAa,SAASP,qBAAqB,CAACQ,IAAI,CAAE,UAASJ,MAAO,EAAC,EAAE;YACzEX,QAAQ,EAAEA,QAAQ;YAClBC,QAAQ,EAAEA;UACZ,CAAC,EAAC;YACAe,OAAO,EAAE;cACP,cAAc,EAAE;YAClB;UACF,CAAC,CAAC;UAGF,IAAMC,SAAS,GAAGH,aAAa,CAACF,IAAI,CAACK,SAAS;UAG9C,IAAMC,cAAc,SAASX,qBAAqB,CAACG,GAAG,CAACO,SAAS,CAAC;UAGjE,IAAME,QAAQ,GAAGD,cAAc,CAACN,IAAI,CAACQ,iBAAiB,CAACC,IAAI;UAG3D,IAAMC,aAAa,SAASf,qBAAqB,CAACQ,IAAI,CAAC,WAAW,EAAE;YAClEQ,UAAU,EAAE,oBAAoB;YAChCF,IAAI,EAAEF,QAAQ;YACdK,SAAS,EAAErB,KAAK;YAChBsB,KAAK,EAAE,mBAAmB;YAC1BC,aAAa,EAAEpB;UACjB,CAAC,EAAC;YACAU,OAAO,EAAE;cACP,cAAc,EAAE;YAClB;UACF,CAAC,CAAC;UAGF,IAAQW,YAAY,GAAKL,aAAa,CAACV,IAAI,CAAnCe,YAAY;UACpB,OAAO;YAAEA,YAAY,EAAZA;UAAa,CAAC;QACzB,CAAC,CAAC,OAAOC,KAAK,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,uBAAuB,EAAED,KAAK,CAAC;QACjD;MACF,CAAC;MAAA,SAAAE,MAAAC,EAAA,EAAAC,GAAA;QAAA,OAAAlC,MAAA,CAAAmC,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAJ,KAAA;IAAA;EAAA;IAAAtC,GAAA;IAAAkB,GAAA,EAzDD,SAAAA,IAAA,EAA0C;MACxC,IAAI,CAAC,IAAI,CAACyB,SAAS,EAAE;QACnB,IAAI,CAACA,SAAS,GAAG,IAAI/C,WAAW,CAAC,CAAC;MACpC;MACA,OAAO,IAAI,CAAC+C,SAAS;IACvB;EAAC;EAAA,OAAA/C,WAAA;AAAA;AAAAgD,MAAA,GAtBGhD,WAAW;AAAXA,WAAW,CACA+C,SAAS;AA4E1B,OAAO,IAAME,WAAW,GAAGjD,WAAW,CAACkD,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}