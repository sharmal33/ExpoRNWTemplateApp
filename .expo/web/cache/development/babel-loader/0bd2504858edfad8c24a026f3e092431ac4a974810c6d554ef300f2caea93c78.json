{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar _class;\nimport axios from 'axios';\nvar AuthApiClient = function () {\n  function AuthApiClient() {\n    _classCallCheck(this, AuthApiClient);\n    this._axiosInstance = void 0;\n  }\n  _createClass(AuthApiClient, [{\n    key: \"configure\",\n    value: function configure(configs) {\n      if (!this._axiosInstance) {\n        var AUTH_BASE_URL = `${configs.authBaseUrl}${configs.envId}`;\n        this._axiosInstance = axios.create({\n          baseURL: AUTH_BASE_URL,\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n      }\n    }\n  }, {\n    key: \"getApiClient\",\n    value: function getApiClient() {\n      if (!this._axiosInstance) {\n        throw new Error('Error: API client is not configured. Call configure() first.');\n      }\n      return this._axiosInstance;\n    }\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (!AuthApiClient._instance) {\n        AuthApiClient._instance = new AuthApiClient();\n      }\n      return AuthApiClient._instance;\n    }\n  }]);\n  return AuthApiClient;\n}();\n_class = AuthApiClient;\nAuthApiClient._instance = void 0;\nexport var authApiClient = AuthApiClient.getInstance();","map":{"version":3,"names":["axios","AuthApiClient","_classCallCheck","_axiosInstance","_createClass","key","value","configure","configs","AUTH_BASE_URL","authBaseUrl","envId","create","baseURL","headers","getApiClient","Error","getInstance","_instance","_class","authApiClient"],"sources":["/Users/sharmalperera/projects/apps/ExpoTemplateAppWithComponent/node_modules/react-native-auth-component/src/services/api-clients/AuthApiClient.tsx"],"sourcesContent":["import axios, { AxiosInstance } from 'axios';\nclass AuthApiClient {\n  private static _instance: AuthApiClient;\n  private _axiosInstance?: AxiosInstance;\n\n  private constructor() {}\n\n  public static getInstance(): AuthApiClient {\n    if (!AuthApiClient._instance) {\n      AuthApiClient._instance = new AuthApiClient();\n    }\n    return AuthApiClient._instance;\n  }\n\n  public configure(configs: { authBaseUrl: string; envId: string }) {\n    if (!this._axiosInstance) {\n      const AUTH_BASE_URL = `${configs.authBaseUrl}${configs.envId}`;\n      this._axiosInstance = axios.create({\n        baseURL: AUTH_BASE_URL,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n    }\n  }\n\n  public getApiClient(): AxiosInstance {\n    if (!this._axiosInstance) {\n      throw new Error('Error: API client is not configured. Call configure() first.');\n    }\n    return this._axiosInstance;\n  }\n}\n\nexport const authApiClient = AuthApiClient.getInstance();\n"],"mappings":";;;AAAA,OAAOA,KAAK,MAAyB,OAAO;AAAC,IACvCC,aAAa;EAIjB,SAAAA,cAAA,EAAsB;IAAAC,eAAA,OAAAD,aAAA;IAAA,KAFdE,cAAc;EAEC;EAACC,YAAA,CAAAH,aAAA;IAAAI,GAAA;IAAAC,KAAA,EASxB,SAAAC,UAAiBC,OAA+C,EAAE;MAChE,IAAI,CAAC,IAAI,CAACL,cAAc,EAAE;QACxB,IAAMM,aAAa,GAAI,GAAED,OAAO,CAACE,WAAY,GAAEF,OAAO,CAACG,KAAM,EAAC;QAC9D,IAAI,CAACR,cAAc,GAAGH,KAAK,CAACY,MAAM,CAAC;UACjCC,OAAO,EAAEJ,aAAa;UACtBK,OAAO,EAAE;YACP,cAAc,EAAE;UAClB;QACF,CAAC,CAAC;MACJ;IACF;EAAC;IAAAT,GAAA;IAAAC,KAAA,EAED,SAAAS,aAAA,EAAqC;MACnC,IAAI,CAAC,IAAI,CAACZ,cAAc,EAAE;QACxB,MAAM,IAAIa,KAAK,CAAC,8DAA8D,CAAC;MACjF;MACA,OAAO,IAAI,CAACb,cAAc;IAC5B;EAAC;IAAAE,GAAA;IAAAC,KAAA,EAxBD,SAAAW,YAAA,EAA2C;MACzC,IAAI,CAAChB,aAAa,CAACiB,SAAS,EAAE;QAC5BjB,aAAa,CAACiB,SAAS,GAAG,IAAIjB,aAAa,CAAC,CAAC;MAC/C;MACA,OAAOA,aAAa,CAACiB,SAAS;IAChC;EAAC;EAAA,OAAAjB,aAAA;AAAA;AAAAkB,MAAA,GAXGlB,aAAa;AAAbA,aAAa,CACFiB,SAAS;AAgC1B,OAAO,IAAME,aAAa,GAAGnB,aAAa,CAACgB,WAAW,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}