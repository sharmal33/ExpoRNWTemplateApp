{"ast":null,"code":"import { firebase } from \"../../../../..\";\nexport function getRemoteConfig(app) {\n  if (app) {\n    return firebase.app(app.name).remoteConfig();\n  }\n  return firebase.app().remoteConfig();\n}\nexport function activate(remoteConfig) {\n  return remoteConfig.activate();\n}\nexport function ensureInitialized(remoteConfig) {\n  return remoteConfig.ensureInitialized();\n}\nexport function fetchAndActivate(remoteConfig) {\n  return remoteConfig.fetchAndActivate();\n}\nexport function fetchConfig(remoteConfig) {\n  return remoteConfig.fetchConfig();\n}\nexport function getAll(remoteConfig) {\n  return remoteConfig.getAll();\n}\nexport function getBoolean(remoteConfig, key) {\n  return remoteConfig.getBoolean(key);\n}\nexport function getNumber(remoteConfig, key) {\n  return remoteConfig.getNumber(key);\n}\nexport function getString(remoteConfig, key) {\n  return remoteConfig.getString(key);\n}\nexport function getValue(remoteConfig, key) {\n  return remoteConfig.getValue(key);\n}\nexport function setLogLevel(remoteConfig, logLevel) {\n  return 'error';\n}\nexport function isSupported() {\n  return Promise.resolve(true);\n}\nexport function fetchTimeMillis(remoteConfig) {\n  return remoteConfig.fetchTimeMillis;\n}\nexport function settings(remoteConfig) {\n  return remoteConfig.settings;\n}\nexport function lastFetchStatus(remoteConfig) {\n  return remoteConfig.lastFetchStatus;\n}\nexport function reset(remoteConfig) {\n  return remoteConfig.reset();\n}\nexport function setConfigSettings(remoteConfig, settings) {\n  return remoteConfig.setConfigSettings(settings);\n}\nexport function fetch(remoteConfig, expirationDurationSeconds) {\n  return remoteConfig.fetch(expirationDurationSeconds);\n}\nexport function setDefaults(remoteConfig, defaults) {\n  return remoteConfig.setDefaults(defaults);\n}\nexport function setDefaultsFromResource(remoteConfig, resourceName) {\n  return remoteConfig.setDefaultsFromResource(resourceName);\n}\nexport function onConfigUpdated(remoteConfig, callback) {\n  return remoteConfig.onConfigUpdated(callback);\n}","map":{"version":3,"names":["firebase","getRemoteConfig","app","name","remoteConfig","activate","ensureInitialized","fetchAndActivate","fetchConfig","getAll","getBoolean","key","getNumber","getString","getValue","setLogLevel","logLevel","isSupported","Promise","resolve","fetchTimeMillis","settings","lastFetchStatus","reset","setConfigSettings","fetch","expirationDurationSeconds","setDefaults","defaults","setDefaultsFromResource","resourceName","onConfigUpdated","callback"],"sources":["/Users/sharmalperera/projects/apps/ExpoTemplateAppWithComponent/node_modules/@react-native-firebase/remote-config/lib/modular/index.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { firebase } from '..';\n\n/**\n * Returns a RemoteConfig instance for the given app.\n * @param app - FirebaseApp. Optional.\n * @returns {RemoteConfig}\n */\nexport function getRemoteConfig(app) {\n  if (app) {\n    return firebase.app(app.name).remoteConfig();\n  }\n\n  return firebase.app().remoteConfig();\n}\n\n/**\n * Returns a Boolean which resolves to true if the current call\n * activated the fetched configs.\n * @param remoteConfig - RemoteConfig instance\n * @returns {Promise<boolean>}\n */\nexport function activate(remoteConfig) {\n  return remoteConfig.activate();\n}\n\n/**\n * Ensures the last activated config are available to the getters.\n * @param remoteConfig - RemoteConfig instance\n * @returns {Promise<void>}\n */\nexport function ensureInitialized(remoteConfig) {\n  return remoteConfig.ensureInitialized();\n}\n\n/**\n * Performs a fetch and returns a Boolean which resolves to true\n * if the current call activated the fetched configs.\n * @param remoteConfig - RemoteConfig instance\n * @returns {Promise<boolean>}\n */\nexport function fetchAndActivate(remoteConfig) {\n  return remoteConfig.fetchAndActivate();\n}\n\n/**\n * Fetches and caches configuration from the Remote Config service.\n * @param remoteConfig - RemoteConfig instance\n * @returns {Promise<void>}\n */\nexport function fetchConfig(remoteConfig) {\n  return remoteConfig.fetchConfig();\n}\n\n/**\n * Gets all config.\n * @param remoteConfig - RemoteConfig instance\n * @returns {Promise<ConfigValues>}\n */\nexport function getAll(remoteConfig) {\n  return remoteConfig.getAll();\n}\n\n/**\n * Gets the value for the given key as a boolean.\n * @param remoteConfig - RemoteConfig instance\n * @param key - key for boolean value\n * @returns {boolean}\n */\nexport function getBoolean(remoteConfig, key) {\n  return remoteConfig.getBoolean(key);\n}\n\n/**\n * Gets the value for the given key as a number.\n * @param remoteConfig - RemoteConfig instance\n * @param key - key for number value\n * @returns {number}\n */\nexport function getNumber(remoteConfig, key) {\n  return remoteConfig.getNumber(key);\n}\n\n/**\n * Gets the value for the given key as a string.\n * @param remoteConfig - RemoteConfig instance\n * @param key - key for string value\n * @returns {string}\n */\nexport function getString(remoteConfig, key) {\n  return remoteConfig.getString(key);\n}\n\n/**\n * Gets the value for the given key\n * @param remoteConfig - RemoteConfig instance\n * @param key - key for the given value\n * @returns {ConfigValue}\n */\nexport function getValue(remoteConfig, key) {\n  return remoteConfig.getValue(key);\n}\n\n/**\n * Defines the log level to use.\n * @param remoteConfig - RemoteConfig instance\n * @param logLevel - The log level to set\n * @returns {RemoteConfigLogLevel}\n */\n// eslint-disable-next-line\nexport function setLogLevel(remoteConfig, logLevel) {\n  // always return the \"error\" log level for now as the setter is ignored on native. Web only.\n  return 'error';\n}\n\n/**\n * Checks two different things.\n * 1. Check if IndexedDB exists in the browser environment.\n * 2. Check if the current browser context allows IndexedDB open() calls.\n * @returns {Promise<boolean>}\n */\nexport function isSupported() {\n  // always return \"true\" for now. Web only.\n  return Promise.resolve(true);\n}\n\n/**\n * Indicates the default value in milliseconds to abandon a pending fetch\n * request made to the Remote Config server. Defaults to 60000 (One minute).\n * @param remoteConfig - RemoteConfig instance\n * @returns {number}\n */\nexport function fetchTimeMillis(remoteConfig) {\n  return remoteConfig.fetchTimeMillis;\n}\n\n/**\n * Returns a ConfigSettings object which provides the properties `minimumFetchIntervalMillis` & `fetchTimeMillis` if they have been set\n * using setConfigSettings({ fetchTimeMillis: number, minimumFetchIntervalMillis: number }).\n * @param remoteConfig - RemoteConfig instance\n * @returns {ConfigSettings}\n */\nexport function settings(remoteConfig) {\n  return remoteConfig.settings;\n}\n\n/**\n * The status of the latest Remote RemoteConfig fetch action.\n * @param remoteConfig - RemoteConfig instance\n * @returns {LastFetchStatusType}\n */\nexport function lastFetchStatus(remoteConfig) {\n  return remoteConfig.lastFetchStatus;\n}\n\n/**\n * Deletes all activated, fetched and defaults configs and\n * resets all Firebase Remote Config settings.\n * Android only. iOS does not reset anything.\n * @param remoteConfig - RemoteConfig instance\n * @returns {Promise<void>}\n */\nexport function reset(remoteConfig) {\n  return remoteConfig.reset();\n}\n\n/**\n * Set the Remote RemoteConfig settings, currently able to set\n * `fetchTimeMillis` & `minimumFetchIntervalMillis`\n * Android only. iOS does not reset anything.\n * @param remoteConfig - RemoteConfig instance\n * @param settings - ConfigSettings instance\n * @returns {Promise<void>}\n */\nexport function setConfigSettings(remoteConfig, settings) {\n  return remoteConfig.setConfigSettings(settings);\n}\n\n/**\n * Fetches parameter values for your app.\n * @param remoteConfig - RemoteConfig instance\n * @param expirationDurationSeconds - number\n * @returns {Promise<void>}\n */\nexport function fetch(remoteConfig, expirationDurationSeconds) {\n  return remoteConfig.fetch(expirationDurationSeconds);\n}\n\n/**\n * Fetches parameter values for your app.\n * @param remoteConfig - RemoteConfig instance\n * @param defaults - ConfigDefaults\n * @returns {Promise<void>}\n */\nexport function setDefaults(remoteConfig, defaults) {\n  return remoteConfig.setDefaults(defaults);\n}\n\n/**\n * Fetches parameter values for your app.\n * @param remoteConfig - RemoteConfig instance\n * @param resourceName - string\n * @returns {Promise<null>}\n */\nexport function setDefaultsFromResource(remoteConfig, resourceName) {\n  return remoteConfig.setDefaultsFromResource(resourceName);\n}\n\n/**\n * Registers a listener to changes in the configuration.\n *\n * @param remoteConfig - RemoteConfig instance\n * @param callback - function called on config change\n * @returns {function} unsubscribe listener\n */\nexport function onConfigUpdated(remoteConfig, callback) {\n  return remoteConfig.onConfigUpdated(callback);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}