{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nimport { useMemo, useState } from 'react';\nimport defaultButtonTheme from \"../components/button/theme\";\nimport { defaultColors } from \"../colors\";\nexport var defaultTheme = function defaultTheme(fonts, colors) {\n  return {\n    colors: defaultColors,\n    button: defaultButtonTheme(fonts, colors)\n  };\n};\nexport var themeDefaultValue = {\n  colors: {},\n  button: {}\n};\nexport var ThemeContext = React.createContext(themeDefaultValue);\nexport var useThemeContextValue = function useThemeContextValue(initial, initI18n) {\n  var _initial$colors, _initial$button;\n  var _useState = useState((_initial$colors = initial.colors) != null ? _initial$colors : {}),\n    _useState2 = _slicedToArray(_useState, 1),\n    colors = _useState2[0];\n  var _useState3 = useState((_initial$button = initial.button) != null ? _initial$button : {}),\n    _useState4 = _slicedToArray(_useState3, 1),\n    button = _useState4[0];\n  return useMemo(function () {\n    return {\n      colors: colors,\n      button: button\n    };\n  }, [colors, button]);\n};","map":{"version":3,"names":["React","useMemo","useState","defaultButtonTheme","defaultColors","defaultTheme","fonts","colors","button","themeDefaultValue","ThemeContext","createContext","useThemeContextValue","initial","initI18n","_initial$colors","_initial$button","_useState","_useState2","_slicedToArray","_useState3","_useState4"],"sources":["/Users/sharmalperera/projects/apps/ExpoTemplateAppWithComponent/node_modules/react-native-theme-component/src/theme-context/context.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useMemo, useState } from 'react';\n// import { ErrorModalStyles } from '../error-modal';\n// import defaultErrorModalTheme from '../error-modal/theme';\n// import { AlertModalStyles } from '../alert';\n// import defaultAlertTheme from '../alert/theme';\n// import { BottomSheetModalStyles } from '../bottom-sheet';\n// import defaultBottomSheetTheme from '../bottom-sheet/theme';\n// import { ButtonStyles } from '../button';\nimport defaultButtonTheme from '../components/button/theme';\nimport { defaultColors, ThemeColorProps } from '../colors';\nimport { defaultFont, ThemeFontProps } from '../fonts';\n// import { InputFieldStyles } from '../input-field';\n// import defaultInputFieldTheme from '../input-field/theme';\n// import { InputPhoneNumberStyles } from '../input-phone-number';\n// import defaultInputPhoneNumberTheme from '../input-phone-number/theme';\n// import { CountryInformation } from '../country-picker/types';\n// import { localCountry, countryServices } from '../services';\n// import { getDeviceCountryCode } from '../country-picker/country-code';\n// import { filter, find, isEmpty } from 'lodash';\n// import { CountryPickerStyles } from '../country-picker';\n// import defaultCountryPickerTheme from '../country-picker/theme';\n// import { DatePickerStyles } from '../date-picker';\n// import defaultDatePickerTheme from '../date-picker/theme';\n// import { ImagePickerStyles } from '../image-picker';\n// import defaultImagePickerTheme from '../image-picker/theme';\n// import { DateRangePickerStyles } from '../date-range-picker';\n// import defaultDateRangePickerTheme from '../date-range-picker/theme';\n// import { CheckBoxStyles } from '../checkbox';\n// import defaultCheckBoxTheme from '../checkbox/theme';\n// import { LoadingModalStyles } from '../loading-modal';\n// import defaultLoadingModalStyles from '../loading-modal/theme';\n//\nexport const defaultTheme = (fonts: ThemeFontProps, colors: ThemeColorProps): ThemeProps => {\n  return {\n    colors: defaultColors,\n    button: defaultButtonTheme(fonts, colors),\n    // alert: defaultAlertTheme(fonts, colors),\n    // fonts: defaultFont,\n    // bottomSheet: defaultBottomSheetTheme,\n    // inputField: defaultInputFieldTheme(fonts, colors),\n    // inputPhoneNumber: defaultInputPhoneNumberTheme(fonts, colors),\n    // errorModal: defaultErrorModalTheme(fonts),\n    // countryPicker: defaultCountryPickerTheme(fonts),\n    // datePicker: defaultDatePickerTheme(fonts, colors),\n    // imagePicker: defaultImagePickerTheme(fonts),\n    // dateRangePicker: defaultDateRangePickerTheme(fonts, colors),\n    // checkBox: defaultCheckBoxTheme(fonts, colors),\n    // loadingModal: defaultLoadingModalStyles(),\n  };\n};\n//\nexport type ThemeProps = {\n  colors: ThemeColorProps;\n  button: ButtonStyles;\n  // fonts: ThemeFontProps;\n  // alert: AlertModalStyles;\n  // bottomSheet: BottomSheetModalStyles;\n  // inputField: InputFieldStyles;\n  // inputPhoneNumber: InputPhoneNumberStyles;\n  // errorModal: ErrorModalStyles;\n  // countryPicker: CountryPickerStyles;\n  // datePicker: DatePickerStyles;\n  // imagePicker: ImagePickerStyles;\n  // dateRangePicker: DateRangePickerStyles;\n  // checkBox: CheckBoxStyles;\n  // loadingModal: LoadingModalStyles;\n};\n//\nexport interface ThemeContextData {\n  colors: ThemeColorProps;\n  button: ButtonStyles;\n  // fonts: ThemeFontProps;\n  // alert: AlertModalStyles;\n  // bottomSheet: BottomSheetModalStyles;\n  // inputField: InputFieldStyles;\n  // inputPhoneNumber: InputPhoneNumberStyles;\n  // errorModal: ErrorModalStyles;\n  // countryPicker: CountryPickerStyles;\n  // datePicker: DatePickerStyles;\n  // imagePicker: ImagePickerStyles;\n  // dateRangePicker: DateRangePickerStyles;\n  // checkBox: CheckBoxStyles;\n  // loadingModal: LoadingModalStyles;\n  // i18n?: any;\n  // countries: CountryInformation[];\n  // deviceCountryCode: string;\n  // isLoadingCountry: boolean;\n  // currencies: any[];\n}\n\nexport const themeDefaultValue: ThemeContextData = {\n  colors: {},\n  button: {},\n  // fonts: {},\n  // alert: {},\n  // bottomSheet: {},\n  // inputField: {},\n  // errorModal: {},\n  // inputPhoneNumber: {},\n  // countryPicker: {},\n  // datePicker: {},\n  // imagePicker: {},\n  // dateRangePicker: {},\n  // checkBox: {},\n  // countries: [],\n  // deviceCountryCode: '65',\n  // isLoadingCountry: false,\n  // currencies: [],\n  // loadingModal: {},\n};\n\nexport const ThemeContext = React.createContext<ThemeContextData>(themeDefaultValue);\n\nexport const useThemeContextValue = (initial: ThemeProps, initI18n?: any): ThemeContextData => {\n  const [colors] = useState<ThemeColorProps>(initial.colors ?? {});\n  // const [fonts] = useState<ThemeFontProps>(initial.fonts ?? {});\n  const [button] = useState<ButtonStyles>(initial.button ?? {});\n  // const [alert] = useState<AlertModalStyles>(initial.alert ?? {});\n  // const [bottomSheet] = useState<BottomSheetModalStyles>(initial.bottomSheet ?? {});\n  // const [inputField] = useState<InputFieldStyles>(initial.inputField ?? {});\n  // const [inputPhoneNumber] = useState<InputPhoneNumberStyles>(initial.inputPhoneNumber ?? {});\n  // const [errorModal] = useState<ErrorModalStyles>(initial.errorModal ?? {});\n  // const [countryPicker] = useState<CountryPickerStyles>(initial.countryPicker ?? {});\n  // const [i18n] = useState<any>(initI18n);\n  // const [countries, setCountries] = useState<CountryInformation[]>([]);\n  // const [deviceCountryCode, setDeviceCountryCode] = useState<string>('65');\n  // const [isLoadingCountry, setLoadingCountry] = useState(false);\n  // const [datePicker] = useState<DatePickerStyles>(initial.datePicker ?? {});\n  // const [imagePicker] = useState<ImagePickerStyles>(initial.imagePicker ?? {});\n  // const [dateRangePicker] = useState<DateRangePickerStyles>(initial.dateRangePicker ?? {});\n  // const [currencies, setCurrencies] = useState<any[]>([]);\n  // const [checkBox] = useState<CheckBoxStyles>(initial.checkBox ?? {});\n  // const [loadingModal] = useState<LoadingModalStyles>(initial.loadingModal ?? {});\n\n  // useEffect(() => {\n  //   getCurrentCountries();\n  //   getCurrencies();\n  // }, []);\n  //\n  // useEffect(() => {\n  //   getCountryCode();\n  // }, [countries]);\n\n  // const getCurrencies = async () => {\n  //   try {\n  //     const _localCurrencies = await localCountry.getCurrencies();\n  //     if (_localCurrencies.length === 0) {\n  //       const _currencies = await countryServices.getCurrencies();\n  //       await localCountry.storeCurrencies(_currencies);\n  //       setCurrencies(_currencies);\n  //     } else {\n  //       setCurrencies(_localCurrencies);\n  //     }\n  //   } catch (error) {\n  //     setCurrencies([]);\n  //   }\n  // };\n\n  // const getCurrentCountries = async () => {\n  //   try {\n  //     setLoadingCountry(true);\n  //     const _localCountries = await localCountry.getCountries();\n  //     if (_localCountries.length === 0) {\n  //       const _countries = await countryServices.getCountries();\n  //       const filteredCountried = filter(\n  //         _countries,\n  //         (country) => !isEmpty(country.attributes.idd) && country.attributes.idd !== 'NONE'\n  //       );\n  //       let lastestCountries: CountryInformation[] = [];\n  //       filteredCountried.forEach((country: CountryInformation) => {\n  //         const separateIdds = country.attributes.idd.split(',');\n  //         if (separateIdds.length > 0) {\n  //           separateIdds.forEach((idd) =>\n  //             lastestCountries.push({\n  //               ...country,\n  //               attributes: {\n  //                 ...country.attributes,\n  //                 idd: idd.trim().replace('+', ''),\n  //               },\n  //             })\n  //           );\n  //         } else {\n  //           lastestCountries.push({\n  //             ...country,\n  //             attributes: { ...country.attributes, idd: country.attributes.idd.replace('+', '') },\n  //           });\n  //         }\n  //       });\n  //       await localCountry.storeCountries(lastestCountries);\n  //       setCountries(lastestCountries);\n  //     } else {\n  //       setCountries(_localCountries);\n  //     }\n  //     setLoadingCountry(false);\n  //   } catch (error) {\n  //     setCountries([]);\n  //     setLoadingCountry(false);\n  //   }\n  // };\n  //\n  // const getCountryCode = async () => {\n  //   const _countryCode = await getDeviceCountryCode();\n  //   if (!isEmpty(countries) && _countryCode) {\n  //     const data = find(countries, (c) => c.attributes.code2 === _countryCode);\n  //     if (data) {\n  //       setDeviceCountryCode(data.attributes.idd);\n  //     }\n  //   }\n  // };\n\n  return useMemo(\n    () => ({\n      colors,\n      // fonts,\n      button,\n      // alert,\n      // bottomSheet,\n      // inputField,\n      // inputPhoneNumber,\n      // i18n,\n      // errorModal,\n      // countries,\n      // deviceCountryCode,\n      // countryPicker,\n      // isLoadingCountry,\n      // datePicker,\n      // imagePicker,\n      // dateRangePicker,\n      // currencies,\n      // checkBox,\n      // loadingModal,\n    }),\n    [\n      colors,\n      // fonts,\n      button,\n      // alert,\n      // bottomSheet,\n      // inputField,\n      // inputPhoneNumber,\n      // i18n,\n      // errorModal,\n      // countries,\n      // deviceCountryCode,\n      // countryPicker,\n      // isLoadingCountry,\n      // datePicker,\n      // imagePicker,\n      // dateRangePicker,\n      // currencies,\n      // checkBox,\n      // loadingModal,\n    ]\n  );\n};\n"],"mappings":";AAAA,OAAOA,KAAK,MAAqB,OAAO;AACxC,SAASC,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AAQzC,OAAOC,kBAAkB;AACzB,SAASC,aAAa;AAuBtB,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAIC,KAAqB,EAAEC,MAAuB,EAAiB;EAC1F,OAAO;IACLA,MAAM,EAAEH,aAAa;IACrBI,MAAM,EAAEL,kBAAkB,CAACG,KAAK,EAAEC,MAAM;EAa1C,CAAC;AACH,CAAC;AAyCD,OAAO,IAAME,iBAAmC,GAAG;EACjDF,MAAM,EAAE,CAAC,CAAC;EACVC,MAAM,EAAE,CAAC;AAiBX,CAAC;AAED,OAAO,IAAME,YAAY,GAAGV,KAAK,CAACW,aAAa,CAAmBF,iBAAiB,CAAC;AAEpF,OAAO,IAAMG,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAIC,OAAmB,EAAEC,QAAc,EAAuB;EAAA,IAAAC,eAAA,EAAAC,eAAA;EAC7F,IAAAC,SAAA,GAAiBf,QAAQ,EAAAa,eAAA,GAAkBF,OAAO,CAACN,MAAM,YAAAQ,eAAA,GAAI,CAAC,CAAC,CAAC;IAAAG,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAzDV,MAAM,GAAAW,UAAA;EAEb,IAAAE,UAAA,GAAiBlB,QAAQ,EAAAc,eAAA,GAAeH,OAAO,CAACL,MAAM,YAAAQ,eAAA,GAAI,CAAC,CAAC,CAAC;IAAAK,UAAA,GAAAF,cAAA,CAAAC,UAAA;IAAtDZ,MAAM,GAAAa,UAAA;EA8Fb,OAAOpB,OAAO,CACZ;IAAA,OAAO;MACLM,MAAM,EAANA,MAAM;MAENC,MAAM,EAANA;IAiBF,CAAC;EAAA,CAAC,EACF,CACED,MAAM,EAENC,MAAM,CAkBV,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}