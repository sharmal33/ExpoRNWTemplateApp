{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useEffect, useState, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Formik } from 'formik';\nimport { TextInput } from 'react-native-paper';\nimport Modal from 'react-native-modal';\nimport { getEnterpriseData } from \"../../utils/screen-utils\";\nimport { useUser } from 'react-native-user-profile-component';\nimport { EditIcon, SelectorIcon, TickIcon } from \"../../assets/icon\";\nimport useMergeStyles from \"./styles\";\nimport generateValidationSchema from \"./generateValidationSchema\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar UserProfile = function UserProfile(_ref) {\n  var fields = _ref.fields;\n  var _useUser = useUser(),\n    userDetails = _useUser.userDetails,\n    updateUserProfile = _useUser.updateUserProfile;\n  var _useState = useState({}),\n    _useState2 = _slicedToArray(_useState, 2),\n    initialValues = _useState2[0],\n    setInitialValues = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    successMessage = _useState4[0],\n    setSuccessMessage = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    errorMessage = _useState6[0],\n    setErrorMessage = _useState6[1];\n  var _useState7 = useState(''),\n    _useState8 = _slicedToArray(_useState7, 2),\n    selectedFieldTitle = _useState8[0],\n    setSelectedFieldTitle = _useState8[1];\n  var _useState9 = useState(''),\n    _useState10 = _slicedToArray(_useState9, 2),\n    selectedField = _useState10[0],\n    setSelectedField = _useState10[1];\n  var _useState11 = useState(null),\n    _useState12 = _slicedToArray(_useState11, 2),\n    activeInput = _useState12[0],\n    setActiveInput = _useState12[1];\n  var _useState13 = useState(false),\n    _useState14 = _slicedToArray(_useState13, 2),\n    isSelectorVisible = _useState14[0],\n    setSelectorVisible = _useState14[1];\n  var _useState15 = useState(null),\n    _useState16 = _slicedToArray(_useState15, 2),\n    selectFieldData = _useState16[0],\n    setSelectFieldData = _useState16[1];\n  var _useState17 = useState({}),\n    _useState18 = _slicedToArray(_useState17, 2),\n    selectedValues = _useState18[0],\n    setSelectedValues = _useState18[1];\n  var _useState19 = useState({}),\n    _useState20 = _slicedToArray(_useState19, 2),\n    formatedFields = _useState20[0],\n    setFormatedFields = _useState20[1];\n  var formikRef = useRef(null);\n  var inputRefs = {};\n  var styles = useMergeStyles();\n  useEffect(function () {\n    if (userDetails) {\n      setInitialValues({\n        \"nickName\": ensureStringValue(userDetails.nickName || \"\"),\n        \"religion\": ensureStringValue(userDetails.religion || \"\"),\n        \"email\": ensureStringValue(userDetails.email || \"\"),\n        \"maritalStatus\": ensureStringValue(userDetails.maritalStatus || \"\"),\n        \"addresses_0_line1\": ensureStringValue(userDetails.addresses[0] ? userDetails.addresses[0].line1 : '' || \"\"),\n        \"addresses_0_line2\": ensureStringValue(userDetails.addresses[0] ? userDetails.addresses[0].line2 : '' || \"\"),\n        \"addresses_0_postcode\": ensureStringValue(userDetails.addresses[0] ? userDetails.addresses[0].postcode : '' || \"\"),\n        \"addresses_0_city\": ensureStringValue(userDetails.addresses[0] ? userDetails.addresses[0].city : '' || \"\"),\n        \"addresses_0_state\": ensureStringValue(userDetails.addresses[0] ? userDetails.addresses[0].state : '' || \"\"),\n        \"employmentDetails_0_employmentType\": ensureStringValue(userDetails.employmentDetails[0] ? userDetails.employmentDetails[0].employmentType : '' || \"\"),\n        \"employmentDetails_0_employmentSector\": ensureStringValue(userDetails.employmentDetails[0] ? userDetails.employmentDetails[0].employmentSector : '' || \"\"),\n        \"employmentDetails_0_companyName\": ensureStringValue(userDetails.employmentDetails[0] ? userDetails.employmentDetails[0].companyName : '' || \"\"),\n        \"employmentDetails_0_occupation\": ensureStringValue(userDetails.employmentDetails[0] ? userDetails.employmentDetails[0].occupation : '' || \"\"),\n        \"creditDetails_0_annualIncome\": ensureStringValue(userDetails.creditDetails[0] ? userDetails.creditDetails[0].annualIncome : '' || \"\")\n      });\n    }\n  }, [userDetails]);\n  var ensureStringValue = function ensureStringValue(value) {\n    if (typeof value === 'number') {\n      return value.toString();\n    }\n    if (typeof value === 'string') {\n      return value;\n    }\n    return '';\n  };\n  var validationSchema = generateValidationSchema(fields);\n  var fetchSelectFieldData = function () {\n    var _ref2 = _asyncToGenerator(function* (field) {\n      try {\n        var _response$;\n        var response = yield getEnterpriseData([`EntData_${field}`]);\n        setSelectFieldData(response == null ? void 0 : (_response$ = response[0]) == null ? void 0 : _response$.dataItems);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    });\n    return function fetchSelectFieldData(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var handleInputIconPress = function handleInputIconPress(field) {\n    if (inputRefs[field]) {\n      inputRefs[field].focus();\n    }\n  };\n  var handleOptionSelect = function handleOptionSelect(field, value) {\n    formikRef.current.setFieldValue(field, value);\n    handleFieldChange(field, value);\n    setSelectedValues(_objectSpread(_objectSpread({}, selectedValues), {}, _defineProperty({}, field, value)));\n    toggleSelector();\n  };\n  var handleFieldChange = function handleFieldChange(field, value) {\n    if ('employmentDetails_0_employmentType' === field) {\n      if ('Unemployed' === value) {\n        formikRef.current.setFieldValue('employmentDetails_0_employmentSector', 'Not Applicable');\n      } else {\n        formikRef.current.setFieldValue('employmentDetails_0_employmentSector' + '_hidden', false);\n      }\n      ;\n      if ('Unemployed' === value) {\n        formikRef.current.setFieldValue('employmentDetails_0_occupation' + '_hidden', true);\n      } else {\n        formikRef.current.setFieldValue('employmentDetails_0_occupation' + '_hidden', false);\n      }\n      ;\n    }\n  };\n  var getMaxHeight = function getMaxHeight() {\n    if (selectFieldData) {\n      if (selectFieldData.length < 3) {\n        return '20%';\n      } else if (selectFieldData.length < 10) {\n        return '40%';\n      } else if (selectFieldData.length < 15) {\n        return '50%';\n      } else {\n        return '80%';\n      }\n    }\n    return '50%';\n  };\n  var toggleSelector = function toggleSelector() {\n    setSelectorVisible(!isSelectorVisible);\n  };\n  var handleInputFocus = function handleInputFocus(field) {\n    setActiveInput(field);\n  };\n  var handleInputBlur = function handleInputBlur(field) {\n    setActiveInput(null);\n  };\n  var saveDetails = function () {\n    var _ref3 = _asyncToGenerator(function* (values) {\n      try {\n        var changedFieldsValues = {};\n        Object.keys(values).forEach(function (fieldName) {\n          if (values[fieldName] !== initialValues[fieldName]) {\n            changedFieldsValues[fieldName] = values[fieldName];\n          }\n        });\n        var changedFields = restructureObject(changedFieldsValues);\n        if (Object.keys(changedFields).length > 0) {\n          yield updateUserProfile(userDetails.userId, changedFields);\n          setSuccessMessage('Profile updated successfully');\n          setErrorMessage('');\n        } else {\n          setSuccessMessage('');\n          setErrorMessage('No changes to save.');\n        }\n      } catch (error) {\n        setSuccessMessage('');\n        setErrorMessage('Error updating profile: ' + error.message);\n      }\n    });\n    return function saveDetails(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var restructureObject = function restructureObject(input) {\n    var output = {};\n    for (var key in input) {\n      var parts = key.split('_');\n      var currentObject = output;\n      for (var i = 0; i < parts.length - 1; i++) {\n        var part = parts[i];\n        if (!currentObject[part]) {\n          if (isNaN(parts[i + 1])) {\n            if (userDetails && userDetails[parts[i - 1]]) {\n              if (userDetails[parts[i - 1]].length > 0) {\n                currentObject[part] = {\n                  'id': userDetails[parts[i - 1]][part].id\n                };\n              } else {\n                currentObject[part] = {};\n              }\n            } else {\n              currentObject[part] = {};\n            }\n          } else {\n            currentObject[part] = [];\n          }\n        }\n        currentObject = currentObject[part];\n      }\n      var lastKey = parts[parts.length - 1];\n      if (!isNaN(lastKey)) {\n        currentObject.push(_defineProperty({}, lastKey, input[key]));\n      } else {\n        currentObject[lastKey] = input[key];\n      }\n    }\n    return output;\n  };\n  return _jsxs(ScrollView, {\n    contentContainerStyle: styles.container,\n    children: [successMessage && _jsx(Text, {\n      style: styles.successMessage,\n      children: successMessage\n    }), errorMessage && _jsx(Text, {\n      style: styles.errorMessage,\n      children: errorMessage\n    }), _jsx(Formik, {\n      innerRef: formikRef,\n      enableReinitialize: true,\n      initialValues: initialValues,\n      validationSchema: validationSchema,\n      onSubmit: saveDetails,\n      children: function children(_ref4) {\n        var handleSubmit = _ref4.handleSubmit,\n          handleChange = _ref4.handleChange,\n          values = _ref4.values,\n          errors = _ref4.errors,\n          touched = _ref4.touched;\n        return _jsxs(_Fragment, {\n          children: [_jsx(View, {\n            testID: 'container-user-info-personalDetails',\n            style: styles.userInfo,\n            children: _jsx(Text, {\n              style: styles.subtitle,\n              children: \"Personal details\"\n            })\n          }), !values['nickName_hidden'] && _jsx(View, {\n            testID: 'container-user-info-nickName',\n            style: styles.userInfo,\n            children: _jsx(View, {\n              style: styles.inputWrapper,\n              children: _jsxs(View, {\n                style: [styles.inputContent, activeInput === 'nickName' ? styles.activeInput : null],\n                children: [_jsx(TextInput, {\n                  testID: \"text-input-user-info-nickName\",\n                  style: [styles.input, values['nickName'] !== initialValues['nickName'] ? styles.errorInput : null],\n                  label: 'Preferred name (will be printed on card)',\n                  name: 'nickName',\n                  onChangeText: handleChange('nickName'),\n                  value: values['nickName'],\n                  onBlur: handleSubmit,\n                  onFocus: function onFocus() {\n                    return handleInputFocus('nickName');\n                  },\n                  editable: true,\n                  underlineColor: \"transparent\",\n                  underlineStyle: {\n                    display: 'none'\n                  },\n                  onBlur: handleInputBlur,\n                  ref: function ref(_ref5) {\n                    return inputRefs['nickName'] = _ref5;\n                  }\n                }), _jsx(TouchableOpacity, {\n                  onPress: function onPress() {\n                    return handleInputIconPress('nickName');\n                  },\n                  activeOpacity: 0.7,\n                  style: styles.inputIconWrapper,\n                  children: _jsx(EditIcon, {})\n                })]\n              })\n            })\n          }), !values['religion_hidden'] && _jsx(View, {\n            testID: 'container-user-info-religion',\n            style: styles.userInfo,\n            children: _jsx(View, {\n              style: styles.inputWrapper,\n              children: _jsxs(View, {\n                style: [styles.inputContent, activeInput === 'religion' ? styles.activeInput : null],\n                children: [_jsx(TextInput, {\n                  testID: \"select-input-user-info-religion\",\n                  style: [styles.input, values['religion'] !== initialValues['religion'] ? styles.errorInput : null],\n                  label: \"Religion\",\n                  name: 'religion',\n                  value: selectedValues['religion'] || values['religion'],\n                  onFocus: function onFocus() {\n                    return handleInputFocus('religion');\n                  },\n                  editable: true,\n                  underlineColor: \"transparent\",\n                  underlineStyle: {\n                    display: 'none'\n                  },\n                  onBlur: handleInputBlur,\n                  ref: function ref(_ref6) {\n                    return inputRefs['religion'] = _ref6;\n                  }\n                }), _jsx(TouchableOpacity, {\n                  onPress: function onPress() {\n                    setSelectedFieldTitle('Religion');\n                    setSelectedField('religion');\n                    toggleSelector();\n                    if ('religion'.includes('_')) {\n                      var lastPart = 'religion'.split('_').pop();\n                      fetchSelectFieldData(lastPart);\n                    } else {\n                      fetchSelectFieldData('religion');\n                    }\n                  },\n                  activeOpacity: 0.7,\n                  style: styles.inputIconWrapper,\n                  children: _jsx(SelectorIcon, {})\n                })]\n              })\n            })\n          }), !values['email_hidden'] && _jsx(View, {\n            testID: 'container-user-info-email',\n            style: styles.userInfo,\n            children: _jsx(View, {\n              style: styles.inputWrapper,\n              children: _jsxs(View, {\n                style: [styles.inputContent, activeInput === 'email' ? styles.activeInput : null],\n                children: [_jsx(TextInput, {\n                  testID: \"text-input-user-info-email\",\n                  style: [styles.input, values['email'] !== initialValues['email'] ? styles.errorInput : null],\n                  label: 'Email',\n                  name: 'email',\n                  onChangeText: handleChange('email'),\n                  value: values['email'],\n                  onBlur: handleSubmit,\n                  onFocus: function onFocus() {\n                    return handleInputFocus('email');\n                  },\n                  editable: true,\n                  underlineColor: \"transparent\",\n                  underlineStyle: {\n                    display: 'none'\n                  },\n                  onBlur: handleInputBlur,\n                  ref: function ref(_ref7) {\n                    return inputRefs['email'] = _ref7;\n                  }\n                }), _jsx(TouchableOpacity, {\n                  onPress: function onPress() {\n                    return handleInputIconPress('email');\n                  },\n                  activeOpacity: 0.7,\n                  style: styles.inputIconWrapper,\n                  children: _jsx(EditIcon, {})\n                })]\n              })\n            })\n          }), !values['maritalStatus_hidden'] && _jsx(View, {\n            testID: 'container-user-info-maritalStatus',\n            style: styles.userInfo,\n            children: _jsx(View, {\n              style: styles.inputWrapper,\n              children: _jsxs(View, {\n                style: [styles.inputContent, activeInput === 'maritalStatus' ? styles.activeInput : null],\n                children: [_jsx(TextInput, {\n                  testID: \"select-input-user-info-maritalStatus\",\n                  style: [styles.input, values['maritalStatus'] !== initialValues['maritalStatus'] ? styles.errorInput : null],\n                  label: \"Marital status\",\n                  name: 'maritalStatus',\n                  value: selectedValues['maritalStatus'] || values['maritalStatus'],\n                  onFocus: function onFocus() {\n                    return handleInputFocus('maritalStatus');\n                  },\n                  editable: true,\n                  underlineColor: \"transparent\",\n                  underlineStyle: {\n                    display: 'none'\n                  },\n                  onBlur: handleInputBlur,\n                  ref: function ref(_ref8) {\n                    return inputRefs['maritalStatus'] = _ref8;\n                  }\n                }), _jsx(TouchableOpacity, {\n                  onPress: function onPress() {\n                    setSelectedFieldTitle('Marital status');\n                    setSelectedField('maritalStatus');\n                    toggleSelector();\n                    if ('maritalStatus'.includes('_')) {\n                      var lastPart = 'maritalStatus'.split('_').pop();\n                      fetchSelectFieldData(lastPart);\n                    } else {\n                      fetchSelectFieldData('maritalStatus');\n                    }\n                  },\n                  activeOpacity: 0.7,\n                  style: styles.inputIconWrapper,\n                  children: _jsx(SelectorIcon, {})\n                })]\n              })\n            })\n          }), _jsx(View, {\n            testID: 'container-user-info-addresses_addressType',\n            style: styles.userInfo,\n            children: _jsx(Text, {\n              style: styles.subtitle,\n              children: \"Mailing address\"\n            })\n          }), !values['addresses_0_line1_hidden'] && _jsx(View, {\n            testID: 'container-user-info-addresses_0_line1',\n            style: styles.userInfo,\n            children: _jsx(View, {\n              style: styles.inputWrapper,\n              children: _jsxs(View, {\n                style: [styles.inputContent, activeInput === 'addresses_0_line1' ? styles.activeInput : null],\n                children: [_jsx(TextInput, {\n                  testID: \"text-input-user-info-addresses_0_line1\",\n                  style: [styles.input, values['addresses_0_line1'] !== initialValues['addresses_0_line1'] ? styles.errorInput : null],\n                  label: 'Address line 1',\n                  name: 'addresses_0_line1',\n                  onChangeText: handleChange('addresses_0_line1'),\n                  value: values['addresses_0_line1'],\n                  onBlur: handleSubmit,\n                  onFocus: function onFocus() {\n                    return handleInputFocus('addresses_0_line1');\n                  },\n                  editable: true,\n                  underlineColor: \"transparent\",\n                  underlineStyle: {\n                    display: 'none'\n                  },\n                  onBlur: handleInputBlur,\n                  ref: function ref(_ref9) {\n                    return inputRefs['addresses_0_line1'] = _ref9;\n                  }\n                }), _jsx(TouchableOpacity, {\n                  onPress: function onPress() {\n                    return handleInputIconPress('addresses_0_line1');\n                  },\n                  activeOpacity: 0.7,\n                  style: styles.inputIconWrapper,\n                  children: _jsx(EditIcon, {})\n                })]\n              })\n            })\n          }), !values['addresses_0_line2_hidden'] && _jsx(View, {\n            testID: 'container-user-info-addresses_0_line2',\n            style: styles.userInfo,\n            children: _jsx(View, {\n              style: styles.inputWrapper,\n              children: _jsxs(View, {\n                style: [styles.inputContent, activeInput === 'addresses_0_line2' ? styles.activeInput : null],\n                children: [_jsx(TextInput, {\n                  testID: \"text-input-user-info-addresses_0_line2\",\n                  style: [styles.input, values['addresses_0_line2'] !== initialValues['addresses_0_line2'] ? styles.errorInput : null],\n                  label: 'Address line 2 (Optional)',\n                  name: 'addresses_0_line2',\n                  onChangeText: handleChange('addresses_0_line2'),\n                  value: values['addresses_0_line2'],\n                  onBlur: handleSubmit,\n                  onFocus: function onFocus() {\n                    return handleInputFocus('addresses_0_line2');\n                  },\n                  editable: true,\n                  underlineColor: \"transparent\",\n                  underlineStyle: {\n                    display: 'none'\n                  },\n                  onBlur: handleInputBlur,\n                  ref: function ref(_ref10) {\n                    return inputRefs['addresses_0_line2'] = _ref10;\n                  }\n                }), _jsx(TouchableOpacity, {\n                  onPress: function onPress() {\n                    return handleInputIconPress('addresses_0_line2');\n                  },\n                  activeOpacity: 0.7,\n                  style: styles.inputIconWrapper,\n                  children: _jsx(EditIcon, {})\n                })]\n              })\n            })\n          }), !values['addresses_0_postcode_hidden'] && _jsx(View, {\n            testID: 'container-user-info-addresses_0_postcode',\n            style: styles.userInfo,\n            children: _jsx(View, {\n              style: styles.inputWrapper,\n              children: _jsxs(View, {\n                style: [styles.inputContent, activeInput === 'addresses_0_postcode' ? styles.activeInput : null],\n                children: [_jsx(TextInput, {\n                  testID: \"text-input-user-info-addresses_0_postcode\",\n                  style: [styles.input, values['addresses_0_postcode'] !== initialValues['addresses_0_postcode'] ? styles.errorInput : null],\n                  label: 'Postcode',\n                  name: 'addresses_0_postcode',\n                  onChangeText: handleChange('addresses_0_postcode'),\n                  value: values['addresses_0_postcode'],\n                  onBlur: handleSubmit,\n                  onFocus: function onFocus() {\n                    return handleInputFocus('addresses_0_postcode');\n                  },\n                  editable: true,\n                  underlineColor: \"transparent\",\n                  underlineStyle: {\n                    display: 'none'\n                  },\n                  onBlur: handleInputBlur,\n                  ref: function ref(_ref11) {\n                    return inputRefs['addresses_0_postcode'] = _ref11;\n                  }\n                }), _jsx(TouchableOpacity, {\n                  onPress: function onPress() {\n                    return handleInputIconPress('addresses_0_postcode');\n                  },\n                  activeOpacity: 0.7,\n                  style: styles.inputIconWrapper,\n                  children: _jsx(EditIcon, {})\n                })]\n              })\n            })\n          }), !values['addresses_0_city_hidden'] && _jsx(View, {\n            testID: 'container-user-info-addresses_0_city',\n            style: styles.userInfo,\n            children: _jsx(View, {\n              style: styles.inputWrapper,\n              children: _jsxs(View, {\n                style: [styles.inputContent, activeInput === 'addresses_0_city' ? styles.activeInput : null],\n                children: [_jsx(TextInput, {\n                  testID: \"select-input-user-info-addresses_0_city\",\n                  style: [styles.input, values['addresses_0_city'] !== initialValues['addresses_0_city'] ? styles.errorInput : null],\n                  label: \"City\",\n                  name: 'addresses_0_city',\n                  value: selectedValues['addresses_0_city'] || values['addresses_0_city'],\n                  onFocus: function onFocus() {\n                    return handleInputFocus('addresses_0_city');\n                  },\n                  editable: true,\n                  underlineColor: \"transparent\",\n                  underlineStyle: {\n                    display: 'none'\n                  },\n                  onBlur: handleInputBlur,\n                  ref: function ref(_ref12) {\n                    return inputRefs['addresses_0_city'] = _ref12;\n                  }\n                }), _jsx(TouchableOpacity, {\n                  onPress: function onPress() {\n                    setSelectedFieldTitle('City');\n                    setSelectedField('addresses_0_city');\n                    toggleSelector();\n                    if ('addresses_0_city'.includes('_')) {\n                      var lastPart = 'addresses_0_city'.split('_').pop();\n                      fetchSelectFieldData(lastPart);\n                    } else {\n                      fetchSelectFieldData('addresses_0_city');\n                    }\n                  },\n                  activeOpacity: 0.7,\n                  style: styles.inputIconWrapper,\n                  children: _jsx(SelectorIcon, {})\n                })]\n              })\n            })\n          }), !values['addresses_0_state_hidden'] && _jsx(View, {\n            testID: 'container-user-info-addresses_0_state',\n            style: styles.userInfo,\n            children: _jsx(View, {\n              style: styles.inputWrapper,\n              children: _jsxs(View, {\n                style: [styles.inputContent, activeInput === 'addresses_0_state' ? styles.activeInput : null],\n                children: [_jsx(TextInput, {\n                  testID: \"select-input-user-info-addresses_0_state\",\n                  style: [styles.input, values['addresses_0_state'] !== initialValues['addresses_0_state'] ? styles.errorInput : null],\n                  label: \"State\",\n                  name: 'addresses_0_state',\n                  value: selectedValues['addresses_0_state'] || values['addresses_0_state'],\n                  onFocus: function onFocus() {\n                    return handleInputFocus('addresses_0_state');\n                  },\n                  editable: true,\n                  underlineColor: \"transparent\",\n                  underlineStyle: {\n                    display: 'none'\n                  },\n                  onBlur: handleInputBlur,\n                  ref: function ref(_ref13) {\n                    return inputRefs['addresses_0_state'] = _ref13;\n                  }\n                }), _jsx(TouchableOpacity, {\n                  onPress: function onPress() {\n                    setSelectedFieldTitle('State');\n                    setSelectedField('addresses_0_state');\n                    toggleSelector();\n                    if ('addresses_0_state'.includes('_')) {\n                      var lastPart = 'addresses_0_state'.split('_').pop();\n                      fetchSelectFieldData(lastPart);\n                    } else {\n                      fetchSelectFieldData('addresses_0_state');\n                    }\n                  },\n                  activeOpacity: 0.7,\n                  style: styles.inputIconWrapper,\n                  children: _jsx(SelectorIcon, {})\n                })]\n              })\n            })\n          }), _jsx(View, {\n            testID: 'container-user-info-employmentDetails',\n            style: styles.userInfo,\n            children: _jsx(Text, {\n              style: styles.subtitle,\n              children: \"Employment details\"\n            })\n          }), !values['employmentDetails_0_employmentType_hidden'] && _jsx(View, {\n            testID: 'container-user-info-employmentDetails_0_employmentType',\n            style: styles.userInfo,\n            children: _jsx(View, {\n              style: styles.inputWrapper,\n              children: _jsxs(View, {\n                style: [styles.inputContent, activeInput === 'employmentDetails_0_employmentType' ? styles.activeInput : null],\n                children: [_jsx(TextInput, {\n                  testID: \"select-input-user-info-employmentDetails_0_employmentType\",\n                  style: [styles.input, values['employmentDetails_0_employmentType'] !== initialValues['employmentDetails_0_employmentType'] ? styles.errorInput : null],\n                  label: \"Employment type\",\n                  name: 'employmentDetails_0_employmentType',\n                  value: selectedValues['employmentDetails_0_employmentType'] || values['employmentDetails_0_employmentType'],\n                  onFocus: function onFocus() {\n                    return handleInputFocus('employmentDetails_0_employmentType');\n                  },\n                  editable: true,\n                  underlineColor: \"transparent\",\n                  underlineStyle: {\n                    display: 'none'\n                  },\n                  onBlur: handleInputBlur,\n                  ref: function ref(_ref14) {\n                    return inputRefs['employmentDetails_0_employmentType'] = _ref14;\n                  }\n                }), _jsx(TouchableOpacity, {\n                  onPress: function onPress() {\n                    setSelectedFieldTitle('Employment type');\n                    setSelectedField('employmentDetails_0_employmentType');\n                    toggleSelector();\n                    if ('employmentDetails_0_employmentType'.includes('_')) {\n                      var lastPart = 'employmentDetails_0_employmentType'.split('_').pop();\n                      fetchSelectFieldData(lastPart);\n                    } else {\n                      fetchSelectFieldData('employmentDetails_0_employmentType');\n                    }\n                  },\n                  activeOpacity: 0.7,\n                  style: styles.inputIconWrapper,\n                  children: _jsx(SelectorIcon, {})\n                })]\n              })\n            })\n          }), !values['employmentDetails_0_employmentSector_hidden'] && _jsx(View, {\n            testID: 'container-user-info-employmentDetails_0_employmentSector',\n            style: styles.userInfo,\n            children: _jsx(View, {\n              style: styles.inputWrapper,\n              children: _jsxs(View, {\n                style: [styles.inputContent, activeInput === 'employmentDetails_0_employmentSector' ? styles.activeInput : null],\n                children: [_jsx(TextInput, {\n                  testID: \"select-input-user-info-employmentDetails_0_employmentSector\",\n                  style: [styles.input, values['employmentDetails_0_employmentSector'] !== initialValues['employmentDetails_0_employmentSector'] ? styles.errorInput : null],\n                  label: \"Employment sector\",\n                  name: 'employmentDetails_0_employmentSector',\n                  value: selectedValues['employmentDetails_0_employmentSector'] || values['employmentDetails_0_employmentSector'],\n                  onFocus: function onFocus() {\n                    return handleInputFocus('employmentDetails_0_employmentSector');\n                  },\n                  editable: true,\n                  underlineColor: \"transparent\",\n                  underlineStyle: {\n                    display: 'none'\n                  },\n                  onBlur: handleInputBlur,\n                  ref: function ref(_ref15) {\n                    return inputRefs['employmentDetails_0_employmentSector'] = _ref15;\n                  }\n                }), _jsx(TouchableOpacity, {\n                  onPress: function onPress() {\n                    setSelectedFieldTitle('Employment sector');\n                    setSelectedField('employmentDetails_0_employmentSector');\n                    toggleSelector();\n                    if ('employmentDetails_0_employmentSector'.includes('_')) {\n                      var lastPart = 'employmentDetails_0_employmentSector'.split('_').pop();\n                      fetchSelectFieldData(lastPart);\n                    } else {\n                      fetchSelectFieldData('employmentDetails_0_employmentSector');\n                    }\n                  },\n                  activeOpacity: 0.7,\n                  style: styles.inputIconWrapper,\n                  children: _jsx(SelectorIcon, {})\n                })]\n              })\n            })\n          }), !values['employmentDetails_0_companyName_hidden'] && _jsx(View, {\n            testID: 'container-user-info-employmentDetails_0_companyName',\n            style: styles.userInfo,\n            children: _jsx(View, {\n              style: styles.inputWrapper,\n              children: _jsxs(View, {\n                style: [styles.inputContent, activeInput === 'employmentDetails_0_companyName' ? styles.activeInput : null],\n                children: [_jsx(TextInput, {\n                  testID: \"text-input-user-info-employmentDetails_0_companyName\",\n                  style: [styles.input, values['employmentDetails_0_companyName'] !== initialValues['employmentDetails_0_companyName'] ? styles.errorInput : null],\n                  label: 'Employer name',\n                  name: 'employmentDetails_0_companyName',\n                  onChangeText: handleChange('employmentDetails_0_companyName'),\n                  value: values['employmentDetails_0_companyName'],\n                  onBlur: handleSubmit,\n                  onFocus: function onFocus() {\n                    return handleInputFocus('employmentDetails_0_companyName');\n                  },\n                  editable: true,\n                  underlineColor: \"transparent\",\n                  underlineStyle: {\n                    display: 'none'\n                  },\n                  onBlur: handleInputBlur,\n                  ref: function ref(_ref16) {\n                    return inputRefs['employmentDetails_0_companyName'] = _ref16;\n                  }\n                }), _jsx(TouchableOpacity, {\n                  onPress: function onPress() {\n                    return handleInputIconPress('employmentDetails_0_companyName');\n                  },\n                  activeOpacity: 0.7,\n                  style: styles.inputIconWrapper,\n                  children: _jsx(EditIcon, {})\n                })]\n              })\n            })\n          }), !values['employmentDetails_0_occupation_hidden'] && _jsx(View, {\n            testID: 'container-user-info-employmentDetails_0_occupation',\n            style: styles.userInfo,\n            children: _jsx(View, {\n              style: styles.inputWrapper,\n              children: _jsxs(View, {\n                style: [styles.inputContent, activeInput === 'employmentDetails_0_occupation' ? styles.activeInput : null],\n                children: [_jsx(TextInput, {\n                  testID: \"select-input-user-info-employmentDetails_0_occupation\",\n                  style: [styles.input, values['employmentDetails_0_occupation'] !== initialValues['employmentDetails_0_occupation'] ? styles.errorInput : null],\n                  label: \"Occupation\",\n                  name: 'employmentDetails_0_occupation',\n                  value: selectedValues['employmentDetails_0_occupation'] || values['employmentDetails_0_occupation'],\n                  onFocus: function onFocus() {\n                    return handleInputFocus('employmentDetails_0_occupation');\n                  },\n                  editable: true,\n                  underlineColor: \"transparent\",\n                  underlineStyle: {\n                    display: 'none'\n                  },\n                  onBlur: handleInputBlur,\n                  ref: function ref(_ref17) {\n                    return inputRefs['employmentDetails_0_occupation'] = _ref17;\n                  }\n                }), _jsx(TouchableOpacity, {\n                  onPress: function onPress() {\n                    setSelectedFieldTitle('Occupation');\n                    setSelectedField('employmentDetails_0_occupation');\n                    toggleSelector();\n                    if ('employmentDetails_0_occupation'.includes('_')) {\n                      var lastPart = 'employmentDetails_0_occupation'.split('_').pop();\n                      fetchSelectFieldData(lastPart);\n                    } else {\n                      fetchSelectFieldData('employmentDetails_0_occupation');\n                    }\n                  },\n                  activeOpacity: 0.7,\n                  style: styles.inputIconWrapper,\n                  children: _jsx(SelectorIcon, {})\n                })]\n              })\n            })\n          }), !values['creditDetails_0_annualIncome_hidden'] && _jsx(View, {\n            testID: 'container-user-info-creditDetails_0_annualIncome',\n            style: styles.userInfo,\n            children: _jsx(View, {\n              style: styles.inputWrapper,\n              children: _jsxs(View, {\n                style: [styles.inputContent, activeInput === 'creditDetails_0_annualIncome' ? styles.activeInput : null],\n                children: [_jsx(TextInput, {\n                  testID: \"text-input-user-info-creditDetails_0_annualIncome\",\n                  style: [styles.input, values['creditDetails_0_annualIncome'] !== initialValues['creditDetails_0_annualIncome'] ? styles.errorInput : null],\n                  label: 'Annual income',\n                  name: 'creditDetails_0_annualIncome',\n                  onChangeText: handleChange('creditDetails_0_annualIncome'),\n                  value: values['creditDetails_0_annualIncome'],\n                  onBlur: handleSubmit,\n                  onFocus: function onFocus() {\n                    return handleInputFocus('creditDetails_0_annualIncome');\n                  },\n                  editable: true,\n                  underlineColor: \"transparent\",\n                  underlineStyle: {\n                    display: 'none'\n                  },\n                  onBlur: handleInputBlur,\n                  ref: function ref(_ref18) {\n                    return inputRefs['creditDetails_0_annualIncome'] = _ref18;\n                  }\n                }), _jsx(TouchableOpacity, {\n                  onPress: function onPress() {\n                    return handleInputIconPress('creditDetails_0_annualIncome');\n                  },\n                  activeOpacity: 0.7,\n                  style: styles.inputIconWrapper,\n                  children: _jsx(EditIcon, {})\n                })]\n              })\n            })\n          }), _jsx(View, {\n            style: styles.saveButtonContainer,\n            children: _jsx(Button, {\n              title: \"Save Details\",\n              onPress: handleSubmit\n            })\n          })]\n        });\n      }\n    }), _jsx(Modal, {\n      isVisible: isSelectorVisible,\n      onBackdropPress: function onBackdropPress() {\n        toggleSelector();\n        setSelectedFieldTitle('');\n        setSelectedField('');\n        setSelectFieldData(null);\n      },\n      backdropOpacity: 0.5,\n      animationIn: \"slideInUp\",\n      animationOut: \"slideOutDown\",\n      style: styles.selectorWrapper,\n      children: _jsxs(View, {\n        style: [styles.selectorContainer, {\n          height: getMaxHeight()\n        }],\n        children: [_jsx(Text, {\n          style: styles.selectorTitle,\n          children: selectedFieldTitle\n        }), _jsx(ScrollView, {\n          showsVerticalScrollIndicator: false,\n          children: selectFieldData ? selectFieldData.map(function (item, index) {\n            return _jsx(TouchableOpacity, {\n              onPress: function onPress() {\n                handleOptionSelect(selectedField, item.value);\n              },\n              activeOpacity: 0.7,\n              children: formikRef.current.getFieldProps(selectedField).value === item.value ? _jsxs(View, {\n                style: styles.selectedItem,\n                children: [_jsx(Text, {\n                  children: item.value\n                }), _jsx(TickIcon, {})]\n              }) : _jsx(View, {\n                style: styles.selectorItem,\n                children: _jsx(Text, {\n                  children: item.value\n                })\n              })\n            }, index);\n          }) : _jsx(Text, {\n            children: \"Loading data...\"\n          })\n        })]\n      })\n    })]\n  });\n};\nexport default UserProfile;","map":{"version":3,"names":["React","useEffect","useState","useRef","View","Text","Button","ScrollView","TouchableOpacity","Formik","TextInput","Modal","getEnterpriseData","useUser","EditIcon","SelectorIcon","TickIcon","useMergeStyles","generateValidationSchema","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","UserProfile","_ref","fields","_useUser","userDetails","updateUserProfile","_useState","_useState2","_slicedToArray","initialValues","setInitialValues","_useState3","_useState4","successMessage","setSuccessMessage","_useState5","_useState6","errorMessage","setErrorMessage","_useState7","_useState8","selectedFieldTitle","setSelectedFieldTitle","_useState9","_useState10","selectedField","setSelectedField","_useState11","_useState12","activeInput","setActiveInput","_useState13","_useState14","isSelectorVisible","setSelectorVisible","_useState15","_useState16","selectFieldData","setSelectFieldData","_useState17","_useState18","selectedValues","setSelectedValues","_useState19","_useState20","formatedFields","setFormatedFields","formikRef","inputRefs","styles","ensureStringValue","nickName","religion","email","maritalStatus","addresses","line1","line2","postcode","city","state","employmentDetails","employmentType","employmentSector","companyName","occupation","creditDetails","annualIncome","value","toString","validationSchema","fetchSelectFieldData","_ref2","_asyncToGenerator","field","_response$","response","dataItems","error","console","_x","apply","arguments","handleInputIconPress","focus","handleOptionSelect","current","setFieldValue","handleFieldChange","_objectSpread","_defineProperty","toggleSelector","getMaxHeight","length","handleInputFocus","handleInputBlur","saveDetails","_ref3","values","changedFieldsValues","Object","keys","forEach","fieldName","changedFields","restructureObject","userId","message","_x2","input","output","key","parts","split","currentObject","i","part","isNaN","id","lastKey","push","contentContainerStyle","container","children","style","innerRef","enableReinitialize","onSubmit","_ref4","handleSubmit","handleChange","errors","touched","testID","userInfo","subtitle","inputWrapper","inputContent","errorInput","label","name","onChangeText","onBlur","onFocus","editable","underlineColor","underlineStyle","display","ref","onPress","activeOpacity","inputIconWrapper","includes","lastPart","pop","saveButtonContainer","title","isVisible","onBackdropPress","backdropOpacity","animationIn","animationOut","selectorWrapper","selectorContainer","height","selectorTitle","showsVerticalScrollIndicator","map","item","index","getFieldProps","selectedItem","selectorItem"],"sources":["/Users/sharmalperera/projects/apps/ExpoTemplateAppWithComponent/src/components/user-profile/index.tsx"],"sourcesContent":["\n    import React, { useEffect, useState, useRef, useContext } from 'react';\n    import { View, Text, Button, ScrollView, StyleSheet, TouchableOpacity } from 'react-native';\n    import { Formik, ErrorMessage } from 'formik';\n    import * as yup from 'yup';\n    import { TextInput } from 'react-native-paper';\n    import Modal from 'react-native-modal';\n    import { getEnterpriseData } from '@/utils/screen-utils';\n    import { useUser } from 'react-native-user-profile-component'; // Import the useUser hook\n    import { ThemeContext } from 'react-native-theme-component';\n    import { EditIcon, SelectorIcon, TickIcon } from '@/assets/icon';\n    import useMergeStyles from './styles';\n    import generateValidationSchema from './generateValidationSchema';\n\n    const UserProfile = ({ fields }) => {\n      // State and logic for the user profile form\n      const { userDetails, updateUserProfile } = useUser(); // Use the useUser hook to access userDetails\n      const [initialValues, setInitialValues] = useState({});\n      const [successMessage, setSuccessMessage] = useState('');\n      const [errorMessage, setErrorMessage] = useState('');\n      const [selectedFieldTitle, setSelectedFieldTitle] = useState('');\n      const [selectedField, setSelectedField] = useState('');\n      const [activeInput, setActiveInput] = useState(null);\n      const [isSelectorVisible, setSelectorVisible] = useState(false);\n      const [selectFieldData, setSelectFieldData] = useState(null);\n      const [selectedValues, setSelectedValues] = useState({});\n      const [formatedFields, setFormatedFields] = useState({});\n\n      const formikRef = useRef(null);\n      const inputRefs = {};\n      const styles = useMergeStyles();\n\n\n\n      useEffect(() => {\n        if (userDetails) {\n          setInitialValues({\n            \"nickName\": ensureStringValue(userDetails.nickName || \"\"),\n        \"religion\": ensureStringValue(userDetails.religion || \"\"),\n        \"email\": ensureStringValue(userDetails.email || \"\"),\n        \"maritalStatus\": ensureStringValue(userDetails.maritalStatus || \"\"),\n\"addresses_0_line1\": ensureStringValue(userDetails.addresses[0] ? userDetails.addresses[0].line1 :''|| \"\"),\n\"addresses_0_line2\": ensureStringValue(userDetails.addresses[0] ? userDetails.addresses[0].line2 :''|| \"\"),\n\"addresses_0_postcode\": ensureStringValue(userDetails.addresses[0] ? userDetails.addresses[0].postcode :''|| \"\"),\n\"addresses_0_city\": ensureStringValue(userDetails.addresses[0] ? userDetails.addresses[0].city :''|| \"\"),\n\"addresses_0_state\": ensureStringValue(userDetails.addresses[0] ? userDetails.addresses[0].state :''|| \"\"),\n\"employmentDetails_0_employmentType\": ensureStringValue(userDetails.employmentDetails[0] ? userDetails.employmentDetails[0].employmentType :''|| \"\"),\n\"employmentDetails_0_employmentSector\": ensureStringValue(userDetails.employmentDetails[0] ? userDetails.employmentDetails[0].employmentSector :''|| \"\"),\n\"employmentDetails_0_companyName\": ensureStringValue(userDetails.employmentDetails[0] ? userDetails.employmentDetails[0].companyName :''|| \"\"),\n\"employmentDetails_0_occupation\": ensureStringValue(userDetails.employmentDetails[0] ? userDetails.employmentDetails[0].occupation :''|| \"\"),\n\"creditDetails_0_annualIncome\": ensureStringValue(userDetails.creditDetails[0] ? userDetails.creditDetails[0].annualIncome :''|| \"\"),\n\n      }\n    );\n        }\n      }, [userDetails]);\n\n      const ensureStringValue=(value)=> {\n        if (typeof value === 'number') {\n          return value.toString(); // Convert number to string\n        }\n        if (typeof value === 'string') {\n          return value; // It's already a string\n        }\n        // Handle other types or undefined here if needed\n        return ''; // Return an empty string for unsupported types\n      }\n\n      // Generate the validation schema using the function\n      const validationSchema = generateValidationSchema(fields);\n\n      // Function to fetch select field data (getEnterpriseData)\n      const fetchSelectFieldData = async (field) => {\n        try {\n         const response = await getEnterpriseData([`EntData_${field}`]);\n         setSelectFieldData(response?.[0]?.dataItems);\n        } catch (error) {\n         console.error('Error fetching data:', error);\n        }\n      };\n\n      // Function to handle icon press for input fields\n      const handleInputIconPress = (field) => {\n        if (inputRefs[field]) {\n          inputRefs[field].focus();\n        }\n      };\n\n      // Function to handle option selection\n      const handleOptionSelect = (field, value) => {\n        // set form data\n        formikRef.current.setFieldValue(field,value);\n        // Handle triggers for this field\n        handleFieldChange(field,value);\n\n        setSelectedValues({\n          ...selectedValues,\n          [field]: value,\n        });\n        toggleSelector();\n      };\n\n      // Function to handle field change\n      // create separate handler for each functio\n      // eg: employmentDetailsTypeFieldChange,employmentDetailsSectorFieldChange,\n      const handleFieldChange = (field, value) => {\n        if ('employmentDetails_0_employmentType' === field) {\n            if ('Unemployed' === value) {\n                // Set the value of the target field to the specified value\n                formikRef.current.setFieldValue('employmentDetails_0_employmentSector', 'Not Applicable');\n\n            } else {\n              // Reset the hidden flag when the condition no longer matches\n              formikRef.current.setFieldValue('employmentDetails_0_employmentSector' + '_hidden', false);\n            };\n            if ('Unemployed' === value) {\n\n                formikRef.current.setFieldValue('employmentDetails_0_occupation' + '_hidden', true);\n\n            } else {\n              // Reset the hidden flag when the condition no longer matches\n              formikRef.current.setFieldValue('employmentDetails_0_occupation' + '_hidden', false);\n            };\n          }\n      };\n\n      // Function to calculate the max height (replace with your logic)\n      const getMaxHeight = () => {\n        if (selectFieldData) {\n         if (selectFieldData.length < 3) {\n           return '20%'; // 1/4 of the screen height\n         } else if (selectFieldData.length < 10) {\n           return '40%'; // 2/4 of the screen height\n         }else if (selectFieldData.length < 15) {\n           return '50%'; // 2/4 of the screen height\n         } else {\n           return '80%'; // 3/4 of the screen height\n         }\n       }\n       return '50%'; // Default to 2/4 of the screen height\n      };\n\n      // Function to toggle the selector modal\n      const toggleSelector = () => {\n        setSelectorVisible(!isSelectorVisible);\n      };\n\n      // Function to handle input focus\n      const handleInputFocus = (field) => {\n        setActiveInput(field);\n      };\n\n      // Function to handle input blur\n      const handleInputBlur = (field) => {\n        setActiveInput(null);\n      };\n\n      // Function to save user details\n      const saveDetails = async (values) => {\n        try {\n\n          const changedFieldsValues = {};\n          Object.keys(values).forEach((fieldName) => {\n            if (values[fieldName] !== initialValues[fieldName]) {\n              changedFieldsValues[fieldName] = values[fieldName];\n            }\n          });\n\n          const changedFields =restructureObject(changedFieldsValues);\n\n          if (Object.keys(changedFields).length > 0) {\n            await updateUserProfile(userDetails.userId, changedFields);\n            setSuccessMessage('Profile updated successfully');\n            setErrorMessage('');\n\n            // setInitialValues({ ...initialValues, ...changedFields });\n          } else {\n            setSuccessMessage('');\n            setErrorMessage('No changes to save.');\n          }\n        } catch (error) {\n          setSuccessMessage('');\n          setErrorMessage('Error updating profile: ' + error.message);\n        }\n      };\n\n      // Function to restructure object\n      const restructureObject=(input)=> {\n        const output = {};\n        for (const key in input) {\n            const parts = key.split('_');\n            let currentObject = output;\n\n            for (let i = 0; i < parts.length - 1; i++) {\n                const part = parts[i];\n\n                if (!currentObject[part]) {\n                    if (isNaN(parts[i + 1])) {\n                        if (userDetails && userDetails[parts[i - 1]]) {\n                          if (userDetails[parts[i - 1]].length > 0) {\n                            currentObject[part] = {'id':userDetails[parts[i - 1]][part].id};\n                          }else{\n                            currentObject[part] = {};\n                          }\n                        }else{\n                          currentObject[part] = {};\n                        }\n\n                    } else {\n                      currentObject[part] = [];\n                    }\n                }\n                currentObject = currentObject[part];\n            }\n\n            const lastKey = parts[parts.length - 1];\n            if (!isNaN(lastKey)) {\n                currentObject.push({ [lastKey]: input[key] });\n            } else {\n                currentObject[lastKey] = input[key];\n            }\n        }\n\n        return output;\n      }\n\n      return (\n        <ScrollView contentContainerStyle={styles.container}>\n          {/* Form elements for user profile */}\n          {successMessage && <Text style={styles.successMessage}>{successMessage}</Text>}\n          {errorMessage && <Text style={styles.errorMessage}>{errorMessage}</Text>}\n          <Formik\n            innerRef={formikRef}\n            enableReinitialize\n            initialValues={initialValues}\n            validationSchema={validationSchema}\n            onSubmit={saveDetails}\n          >\n            {({ handleSubmit, handleChange, values, errors, touched }) => {\n              return (\n                <>\n\n                  {/* subtitle - Personal details */}\n                  <View\n                    testID={'container-user-info-personalDetails'}\n                    style={styles.userInfo}\n                  >\n                    <Text style={styles.subtitle}>Personal details</Text>\n                  </View>\n\n                  {/* textField - Preferred name (will be printed on card) */}\n                  {!values['nickName_hidden'] && <View\n                    testID={'container-user-info-nickName'}\n                    style={styles.userInfo}\n                  >\n                    <View style={styles.inputWrapper}>\n                      <View\n                        style={[\n                          styles.inputContent,\n                          activeInput === 'nickName' ? styles.activeInput : null,\n                        ]}\n                      >\n                        <TextInput\n                          testID={\"text-input-user-info-nickName\"}\n                          style={[\n                            styles.input,\n                            values['nickName'] !== initialValues['nickName']\n                              ? styles.errorInput\n                              : null,\n                          ]}\n                          label={'Preferred name (will be printed on card)'}\n                          name={'nickName'}\n                          onChangeText={handleChange('nickName')}\n                          value={values['nickName']}\n                          onBlur={handleSubmit}\n                          onFocus={() => handleInputFocus('nickName')}\n                          editable={true}\n                          underlineColor=\"transparent\"\n                          underlineStyle={{\n                            display: 'none',\n                          }}\n                          onBlur={handleInputBlur}\n                          ref={(ref) => (inputRefs['nickName'] = ref)}\n                        />\n                        <TouchableOpacity\n                          onPress={() => handleInputIconPress('nickName')}\n                          activeOpacity={0.7}\n                          style={styles.inputIconWrapper}\n                        >\n                          <EditIcon />\n                        </TouchableOpacity>\n                      </View>\n                    </View>\n                  </View>}\n\n                  {/* selectField - Religion */}\n                  {!values['religion_hidden'] && <View\n                    testID={'container-user-info-religion'}\n                    style={styles.userInfo}\n                  >\n                    <View style={styles.inputWrapper}>\n                      <View\n                        style={[\n                          styles.inputContent,\n                          activeInput === 'religion' ? styles.activeInput : null,\n                        ]}\n                      >\n                        <TextInput\n                          testID={\"select-input-user-info-religion\"}\n                          style={[\n                            styles.input,\n                            values['religion'] !== initialValues['religion']\n                              ? styles.errorInput\n                              : null,\n                          ]}\n                          label={\"Religion\"}\n                          name={'religion'}\n                          value={selectedValues['religion'] || values['religion']}\n                          onFocus={() => handleInputFocus('religion')}\n                          editable={true}\n                          underlineColor=\"transparent\"\n                          underlineStyle={{\n                            display: 'none',\n                          }}\n                          onBlur={handleInputBlur}\n                          ref={(ref) => (inputRefs['religion'] = ref)}\n                        />\n                        <TouchableOpacity\n                          onPress={() => {\n                            setSelectedFieldTitle('Religion')\n                            setSelectedField('religion')\n                            toggleSelector()\n                            // Fetch data when the selectField is clicked\n                            if ('religion'.includes('_')) {\n                              const lastPart = 'religion'.split('_').pop();\n                              fetchSelectFieldData(lastPart);\n                            } else {\n                              fetchSelectFieldData('religion');\n                            }\n                          }} // Open the action sheet modal\n                          activeOpacity={0.7}\n                          style={styles.inputIconWrapper}\n                        >\n                          <SelectorIcon />\n                        </TouchableOpacity>\n                      </View>\n                    </View>\n                  </View>}\n\n                  {/* textField - Email */}\n                  {!values['email_hidden'] && <View\n                    testID={'container-user-info-email'}\n                    style={styles.userInfo}\n                  >\n                    <View style={styles.inputWrapper}>\n                      <View\n                        style={[\n                          styles.inputContent,\n                          activeInput === 'email' ? styles.activeInput : null,\n                        ]}\n                      >\n                        <TextInput\n                          testID={\"text-input-user-info-email\"}\n                          style={[\n                            styles.input,\n                            values['email'] !== initialValues['email']\n                              ? styles.errorInput\n                              : null,\n                          ]}\n                          label={'Email'}\n                          name={'email'}\n                          onChangeText={handleChange('email')}\n                          value={values['email']}\n                          onBlur={handleSubmit}\n                          onFocus={() => handleInputFocus('email')}\n                          editable={true}\n                          underlineColor=\"transparent\"\n                          underlineStyle={{\n                            display: 'none',\n                          }}\n                          onBlur={handleInputBlur}\n                          ref={(ref) => (inputRefs['email'] = ref)}\n                        />\n                        <TouchableOpacity\n                          onPress={() => handleInputIconPress('email')}\n                          activeOpacity={0.7}\n                          style={styles.inputIconWrapper}\n                        >\n                          <EditIcon />\n                        </TouchableOpacity>\n                      </View>\n                    </View>\n                  </View>}\n\n                  {/* selectField - Marital status */}\n                  {!values['maritalStatus_hidden'] && <View\n                    testID={'container-user-info-maritalStatus'}\n                    style={styles.userInfo}\n                  >\n                    <View style={styles.inputWrapper}>\n                      <View\n                        style={[\n                          styles.inputContent,\n                          activeInput === 'maritalStatus' ? styles.activeInput : null,\n                        ]}\n                      >\n                        <TextInput\n                          testID={\"select-input-user-info-maritalStatus\"}\n                          style={[\n                            styles.input,\n                            values['maritalStatus'] !== initialValues['maritalStatus']\n                              ? styles.errorInput\n                              : null,\n                          ]}\n                          label={\"Marital status\"}\n                          name={'maritalStatus'}\n                          value={selectedValues['maritalStatus'] || values['maritalStatus']}\n                          onFocus={() => handleInputFocus('maritalStatus')}\n                          editable={true}\n                          underlineColor=\"transparent\"\n                          underlineStyle={{\n                            display: 'none',\n                          }}\n                          onBlur={handleInputBlur}\n                          ref={(ref) => (inputRefs['maritalStatus'] = ref)}\n                        />\n                        <TouchableOpacity\n                          onPress={() => {\n                            setSelectedFieldTitle('Marital status')\n                            setSelectedField('maritalStatus')\n                            toggleSelector()\n                            // Fetch data when the selectField is clicked\n                            if ('maritalStatus'.includes('_')) {\n                              const lastPart = 'maritalStatus'.split('_').pop();\n                              fetchSelectFieldData(lastPart);\n                            } else {\n                              fetchSelectFieldData('maritalStatus');\n                            }\n                          }} // Open the action sheet modal\n                          activeOpacity={0.7}\n                          style={styles.inputIconWrapper}\n                        >\n                          <SelectorIcon />\n                        </TouchableOpacity>\n                      </View>\n                    </View>\n                  </View>}\n\n                  {/* subtitle - Mailing address */}\n                  <View\n                    testID={'container-user-info-addresses_addressType'}\n                    style={styles.userInfo}\n                  >\n                    <Text style={styles.subtitle}>Mailing address</Text>\n                  </View>\n\n                  {/* textField - Address line 1 */}\n                  {!values['addresses_0_line1_hidden'] && <View\n                    testID={'container-user-info-addresses_0_line1'}\n                    style={styles.userInfo}\n                  >\n                    <View style={styles.inputWrapper}>\n                      <View\n                        style={[\n                          styles.inputContent,\n                          activeInput === 'addresses_0_line1' ? styles.activeInput : null,\n                        ]}\n                      >\n                        <TextInput\n                          testID={\"text-input-user-info-addresses_0_line1\"}\n                          style={[\n                            styles.input,\n                            values['addresses_0_line1'] !== initialValues['addresses_0_line1']\n                              ? styles.errorInput\n                              : null,\n                          ]}\n                          label={'Address line 1'}\n                          name={'addresses_0_line1'}\n                          onChangeText={handleChange('addresses_0_line1')}\n                          value={values['addresses_0_line1']}\n                          onBlur={handleSubmit}\n                          onFocus={() => handleInputFocus('addresses_0_line1')}\n                          editable={true}\n                          underlineColor=\"transparent\"\n                          underlineStyle={{\n                            display: 'none',\n                          }}\n                          onBlur={handleInputBlur}\n                          ref={(ref) => (inputRefs['addresses_0_line1'] = ref)}\n                        />\n                        <TouchableOpacity\n                          onPress={() => handleInputIconPress('addresses_0_line1')}\n                          activeOpacity={0.7}\n                          style={styles.inputIconWrapper}\n                        >\n                          <EditIcon />\n                        </TouchableOpacity>\n                      </View>\n                    </View>\n                  </View>}\n\n                  {/* textField - Address line 2 (Optional) */}\n                  {!values['addresses_0_line2_hidden'] && <View\n                    testID={'container-user-info-addresses_0_line2'}\n                    style={styles.userInfo}\n                  >\n                    <View style={styles.inputWrapper}>\n                      <View\n                        style={[\n                          styles.inputContent,\n                          activeInput === 'addresses_0_line2' ? styles.activeInput : null,\n                        ]}\n                      >\n                        <TextInput\n                          testID={\"text-input-user-info-addresses_0_line2\"}\n                          style={[\n                            styles.input,\n                            values['addresses_0_line2'] !== initialValues['addresses_0_line2']\n                              ? styles.errorInput\n                              : null,\n                          ]}\n                          label={'Address line 2 (Optional)'}\n                          name={'addresses_0_line2'}\n                          onChangeText={handleChange('addresses_0_line2')}\n                          value={values['addresses_0_line2']}\n                          onBlur={handleSubmit}\n                          onFocus={() => handleInputFocus('addresses_0_line2')}\n                          editable={true}\n                          underlineColor=\"transparent\"\n                          underlineStyle={{\n                            display: 'none',\n                          }}\n                          onBlur={handleInputBlur}\n                          ref={(ref) => (inputRefs['addresses_0_line2'] = ref)}\n                        />\n                        <TouchableOpacity\n                          onPress={() => handleInputIconPress('addresses_0_line2')}\n                          activeOpacity={0.7}\n                          style={styles.inputIconWrapper}\n                        >\n                          <EditIcon />\n                        </TouchableOpacity>\n                      </View>\n                    </View>\n                  </View>}\n\n                  {/* textField - Postcode */}\n                  {!values['addresses_0_postcode_hidden'] && <View\n                    testID={'container-user-info-addresses_0_postcode'}\n                    style={styles.userInfo}\n                  >\n                    <View style={styles.inputWrapper}>\n                      <View\n                        style={[\n                          styles.inputContent,\n                          activeInput === 'addresses_0_postcode' ? styles.activeInput : null,\n                        ]}\n                      >\n                        <TextInput\n                          testID={\"text-input-user-info-addresses_0_postcode\"}\n                          style={[\n                            styles.input,\n                            values['addresses_0_postcode'] !== initialValues['addresses_0_postcode']\n                              ? styles.errorInput\n                              : null,\n                          ]}\n                          label={'Postcode'}\n                          name={'addresses_0_postcode'}\n                          onChangeText={handleChange('addresses_0_postcode')}\n                          value={values['addresses_0_postcode']}\n                          onBlur={handleSubmit}\n                          onFocus={() => handleInputFocus('addresses_0_postcode')}\n                          editable={true}\n                          underlineColor=\"transparent\"\n                          underlineStyle={{\n                            display: 'none',\n                          }}\n                          onBlur={handleInputBlur}\n                          ref={(ref) => (inputRefs['addresses_0_postcode'] = ref)}\n                        />\n                        <TouchableOpacity\n                          onPress={() => handleInputIconPress('addresses_0_postcode')}\n                          activeOpacity={0.7}\n                          style={styles.inputIconWrapper}\n                        >\n                          <EditIcon />\n                        </TouchableOpacity>\n                      </View>\n                    </View>\n                  </View>}\n\n                  {/* selectField - City */}\n                  {!values['addresses_0_city_hidden'] && <View\n                    testID={'container-user-info-addresses_0_city'}\n                    style={styles.userInfo}\n                  >\n                    <View style={styles.inputWrapper}>\n                      <View\n                        style={[\n                          styles.inputContent,\n                          activeInput === 'addresses_0_city' ? styles.activeInput : null,\n                        ]}\n                      >\n                        <TextInput\n                          testID={\"select-input-user-info-addresses_0_city\"}\n                          style={[\n                            styles.input,\n                            values['addresses_0_city'] !== initialValues['addresses_0_city']\n                              ? styles.errorInput\n                              : null,\n                          ]}\n                          label={\"City\"}\n                          name={'addresses_0_city'}\n                          value={selectedValues['addresses_0_city'] || values['addresses_0_city']}\n                          onFocus={() => handleInputFocus('addresses_0_city')}\n                          editable={true}\n                          underlineColor=\"transparent\"\n                          underlineStyle={{\n                            display: 'none',\n                          }}\n                          onBlur={handleInputBlur}\n                          ref={(ref) => (inputRefs['addresses_0_city'] = ref)}\n                        />\n                        <TouchableOpacity\n                          onPress={() => {\n                            setSelectedFieldTitle('City')\n                            setSelectedField('addresses_0_city')\n                            toggleSelector()\n                            // Fetch data when the selectField is clicked\n                            if ('addresses_0_city'.includes('_')) {\n                              const lastPart = 'addresses_0_city'.split('_').pop();\n                              fetchSelectFieldData(lastPart);\n                            } else {\n                              fetchSelectFieldData('addresses_0_city');\n                            }\n                          }} // Open the action sheet modal\n                          activeOpacity={0.7}\n                          style={styles.inputIconWrapper}\n                        >\n                          <SelectorIcon />\n                        </TouchableOpacity>\n                      </View>\n                    </View>\n                  </View>}\n\n                  {/* selectField - State */}\n                  {!values['addresses_0_state_hidden'] && <View\n                    testID={'container-user-info-addresses_0_state'}\n                    style={styles.userInfo}\n                  >\n                    <View style={styles.inputWrapper}>\n                      <View\n                        style={[\n                          styles.inputContent,\n                          activeInput === 'addresses_0_state' ? styles.activeInput : null,\n                        ]}\n                      >\n                        <TextInput\n                          testID={\"select-input-user-info-addresses_0_state\"}\n                          style={[\n                            styles.input,\n                            values['addresses_0_state'] !== initialValues['addresses_0_state']\n                              ? styles.errorInput\n                              : null,\n                          ]}\n                          label={\"State\"}\n                          name={'addresses_0_state'}\n                          value={selectedValues['addresses_0_state'] || values['addresses_0_state']}\n                          onFocus={() => handleInputFocus('addresses_0_state')}\n                          editable={true}\n                          underlineColor=\"transparent\"\n                          underlineStyle={{\n                            display: 'none',\n                          }}\n                          onBlur={handleInputBlur}\n                          ref={(ref) => (inputRefs['addresses_0_state'] = ref)}\n                        />\n                        <TouchableOpacity\n                          onPress={() => {\n                            setSelectedFieldTitle('State')\n                            setSelectedField('addresses_0_state')\n                            toggleSelector()\n                            // Fetch data when the selectField is clicked\n                            if ('addresses_0_state'.includes('_')) {\n                              const lastPart = 'addresses_0_state'.split('_').pop();\n                              fetchSelectFieldData(lastPart);\n                            } else {\n                              fetchSelectFieldData('addresses_0_state');\n                            }\n                          }} // Open the action sheet modal\n                          activeOpacity={0.7}\n                          style={styles.inputIconWrapper}\n                        >\n                          <SelectorIcon />\n                        </TouchableOpacity>\n                      </View>\n                    </View>\n                  </View>}\n\n                  {/* subtitle - Employment details */}\n                  <View\n                    testID={'container-user-info-employmentDetails'}\n                    style={styles.userInfo}\n                  >\n                    <Text style={styles.subtitle}>Employment details</Text>\n                  </View>\n\n                  {/* selectField - Employment type */}\n                  {!values['employmentDetails_0_employmentType_hidden'] && <View\n                    testID={'container-user-info-employmentDetails_0_employmentType'}\n                    style={styles.userInfo}\n                  >\n                    <View style={styles.inputWrapper}>\n                      <View\n                        style={[\n                          styles.inputContent,\n                          activeInput === 'employmentDetails_0_employmentType' ? styles.activeInput : null,\n                        ]}\n                      >\n                        <TextInput\n                          testID={\"select-input-user-info-employmentDetails_0_employmentType\"}\n                          style={[\n                            styles.input,\n                            values['employmentDetails_0_employmentType'] !== initialValues['employmentDetails_0_employmentType']\n                              ? styles.errorInput\n                              : null,\n                          ]}\n                          label={\"Employment type\"}\n                          name={'employmentDetails_0_employmentType'}\n                          value={selectedValues['employmentDetails_0_employmentType'] || values['employmentDetails_0_employmentType']}\n                          onFocus={() => handleInputFocus('employmentDetails_0_employmentType')}\n                          editable={true}\n                          underlineColor=\"transparent\"\n                          underlineStyle={{\n                            display: 'none',\n                          }}\n                          onBlur={handleInputBlur}\n                          ref={(ref) => (inputRefs['employmentDetails_0_employmentType'] = ref)}\n                        />\n                        <TouchableOpacity\n                          onPress={() => {\n                            setSelectedFieldTitle('Employment type')\n                            setSelectedField('employmentDetails_0_employmentType')\n                            toggleSelector()\n                            // Fetch data when the selectField is clicked\n                            if ('employmentDetails_0_employmentType'.includes('_')) {\n                              const lastPart = 'employmentDetails_0_employmentType'.split('_').pop();\n                              fetchSelectFieldData(lastPart);\n                            } else {\n                              fetchSelectFieldData('employmentDetails_0_employmentType');\n                            }\n                          }} // Open the action sheet modal\n                          activeOpacity={0.7}\n                          style={styles.inputIconWrapper}\n                        >\n                          <SelectorIcon />\n                        </TouchableOpacity>\n                      </View>\n                    </View>\n                  </View>}\n\n                  {/* selectField - Employment sector */}\n                  {!values['employmentDetails_0_employmentSector_hidden'] && <View\n                    testID={'container-user-info-employmentDetails_0_employmentSector'}\n                    style={styles.userInfo}\n                  >\n                    <View style={styles.inputWrapper}>\n                      <View\n                        style={[\n                          styles.inputContent,\n                          activeInput === 'employmentDetails_0_employmentSector' ? styles.activeInput : null,\n                        ]}\n                      >\n                        <TextInput\n                          testID={\"select-input-user-info-employmentDetails_0_employmentSector\"}\n                          style={[\n                            styles.input,\n                            values['employmentDetails_0_employmentSector'] !== initialValues['employmentDetails_0_employmentSector']\n                              ? styles.errorInput\n                              : null,\n                          ]}\n                          label={\"Employment sector\"}\n                          name={'employmentDetails_0_employmentSector'}\n                          value={selectedValues['employmentDetails_0_employmentSector'] || values['employmentDetails_0_employmentSector']}\n                          onFocus={() => handleInputFocus('employmentDetails_0_employmentSector')}\n                          editable={true}\n                          underlineColor=\"transparent\"\n                          underlineStyle={{\n                            display: 'none',\n                          }}\n                          onBlur={handleInputBlur}\n                          ref={(ref) => (inputRefs['employmentDetails_0_employmentSector'] = ref)}\n                        />\n                        <TouchableOpacity\n                          onPress={() => {\n                            setSelectedFieldTitle('Employment sector')\n                            setSelectedField('employmentDetails_0_employmentSector')\n                            toggleSelector()\n                            // Fetch data when the selectField is clicked\n                            if ('employmentDetails_0_employmentSector'.includes('_')) {\n                              const lastPart = 'employmentDetails_0_employmentSector'.split('_').pop();\n                              fetchSelectFieldData(lastPart);\n                            } else {\n                              fetchSelectFieldData('employmentDetails_0_employmentSector');\n                            }\n                          }} // Open the action sheet modal\n                          activeOpacity={0.7}\n                          style={styles.inputIconWrapper}\n                        >\n                          <SelectorIcon />\n                        </TouchableOpacity>\n                      </View>\n                    </View>\n                  </View>}\n\n                  {/* textField - Employer name */}\n                  {!values['employmentDetails_0_companyName_hidden'] && <View\n                    testID={'container-user-info-employmentDetails_0_companyName'}\n                    style={styles.userInfo}\n                  >\n                    <View style={styles.inputWrapper}>\n                      <View\n                        style={[\n                          styles.inputContent,\n                          activeInput === 'employmentDetails_0_companyName' ? styles.activeInput : null,\n                        ]}\n                      >\n                        <TextInput\n                          testID={\"text-input-user-info-employmentDetails_0_companyName\"}\n                          style={[\n                            styles.input,\n                            values['employmentDetails_0_companyName'] !== initialValues['employmentDetails_0_companyName']\n                              ? styles.errorInput\n                              : null,\n                          ]}\n                          label={'Employer name'}\n                          name={'employmentDetails_0_companyName'}\n                          onChangeText={handleChange('employmentDetails_0_companyName')}\n                          value={values['employmentDetails_0_companyName']}\n                          onBlur={handleSubmit}\n                          onFocus={() => handleInputFocus('employmentDetails_0_companyName')}\n                          editable={true}\n                          underlineColor=\"transparent\"\n                          underlineStyle={{\n                            display: 'none',\n                          }}\n                          onBlur={handleInputBlur}\n                          ref={(ref) => (inputRefs['employmentDetails_0_companyName'] = ref)}\n                        />\n                        <TouchableOpacity\n                          onPress={() => handleInputIconPress('employmentDetails_0_companyName')}\n                          activeOpacity={0.7}\n                          style={styles.inputIconWrapper}\n                        >\n                          <EditIcon />\n                        </TouchableOpacity>\n                      </View>\n                    </View>\n                  </View>}\n\n                  {/* selectField - Occupation */}\n                  {!values['employmentDetails_0_occupation_hidden'] && <View\n                    testID={'container-user-info-employmentDetails_0_occupation'}\n                    style={styles.userInfo}\n                  >\n                    <View style={styles.inputWrapper}>\n                      <View\n                        style={[\n                          styles.inputContent,\n                          activeInput === 'employmentDetails_0_occupation' ? styles.activeInput : null,\n                        ]}\n                      >\n                        <TextInput\n                          testID={\"select-input-user-info-employmentDetails_0_occupation\"}\n                          style={[\n                            styles.input,\n                            values['employmentDetails_0_occupation'] !== initialValues['employmentDetails_0_occupation']\n                              ? styles.errorInput\n                              : null,\n                          ]}\n                          label={\"Occupation\"}\n                          name={'employmentDetails_0_occupation'}\n                          value={selectedValues['employmentDetails_0_occupation'] || values['employmentDetails_0_occupation']}\n                          onFocus={() => handleInputFocus('employmentDetails_0_occupation')}\n                          editable={true}\n                          underlineColor=\"transparent\"\n                          underlineStyle={{\n                            display: 'none',\n                          }}\n                          onBlur={handleInputBlur}\n                          ref={(ref) => (inputRefs['employmentDetails_0_occupation'] = ref)}\n                        />\n                        <TouchableOpacity\n                          onPress={() => {\n                            setSelectedFieldTitle('Occupation')\n                            setSelectedField('employmentDetails_0_occupation')\n                            toggleSelector()\n                            // Fetch data when the selectField is clicked\n                            if ('employmentDetails_0_occupation'.includes('_')) {\n                              const lastPart = 'employmentDetails_0_occupation'.split('_').pop();\n                              fetchSelectFieldData(lastPart);\n                            } else {\n                              fetchSelectFieldData('employmentDetails_0_occupation');\n                            }\n                          }} // Open the action sheet modal\n                          activeOpacity={0.7}\n                          style={styles.inputIconWrapper}\n                        >\n                          <SelectorIcon />\n                        </TouchableOpacity>\n                      </View>\n                    </View>\n                  </View>}\n\n                  {/* textField - Annual income */}\n                  {!values['creditDetails_0_annualIncome_hidden'] && <View\n                    testID={'container-user-info-creditDetails_0_annualIncome'}\n                    style={styles.userInfo}\n                  >\n                    <View style={styles.inputWrapper}>\n                      <View\n                        style={[\n                          styles.inputContent,\n                          activeInput === 'creditDetails_0_annualIncome' ? styles.activeInput : null,\n                        ]}\n                      >\n                        <TextInput\n                          testID={\"text-input-user-info-creditDetails_0_annualIncome\"}\n                          style={[\n                            styles.input,\n                            values['creditDetails_0_annualIncome'] !== initialValues['creditDetails_0_annualIncome']\n                              ? styles.errorInput\n                              : null,\n                          ]}\n                          label={'Annual income'}\n                          name={'creditDetails_0_annualIncome'}\n                          onChangeText={handleChange('creditDetails_0_annualIncome')}\n                          value={values['creditDetails_0_annualIncome']}\n                          onBlur={handleSubmit}\n                          onFocus={() => handleInputFocus('creditDetails_0_annualIncome')}\n                          editable={true}\n                          underlineColor=\"transparent\"\n                          underlineStyle={{\n                            display: 'none',\n                          }}\n                          onBlur={handleInputBlur}\n                          ref={(ref) => (inputRefs['creditDetails_0_annualIncome'] = ref)}\n                        />\n                        <TouchableOpacity\n                          onPress={() => handleInputIconPress('creditDetails_0_annualIncome')}\n                          activeOpacity={0.7}\n                          style={styles.inputIconWrapper}\n                        >\n                          <EditIcon />\n                        </TouchableOpacity>\n                      </View>\n                    </View>\n                  </View>}\n\n                  {/* Save Details button */}\n                  <View style={styles.saveButtonContainer}>\n                    <Button title=\"Save Details\" onPress={handleSubmit} />\n                  </View>\n                </>\n              );\n            }}\n          </Formik>\n          {/* Modal for selecting options */}\n          <Modal\n            isVisible={isSelectorVisible}\n            onBackdropPress={() => {\n              toggleSelector()\n              setSelectedFieldTitle('')\n              setSelectedField('')\n              setSelectFieldData(null);\n            }} // Close the modal when clicking outside\n            backdropOpacity={0.5}\n            animationIn=\"slideInUp\" // Specify the animation to open from the bottom\n            animationOut=\"slideOutDown\" // Specify the animation to close towards the bottom\n            style={styles.selectorWrapper}\n            // style={[styles.selectorWrapper, { height: getMaxHeight() }]}\n          >\n            <View style={[styles.selectorContainer,{ height: getMaxHeight() }]}>\n              {/* Add your action sheet content here */}\n              <Text style={styles.selectorTitle}>{selectedFieldTitle}</Text>\n              <ScrollView   showsVerticalScrollIndicator={false}>\n              {selectFieldData ? (\n                selectFieldData.map((item, index) => (\n                  <TouchableOpacity\n                    key={index}\n                    onPress={() => {\n                      handleOptionSelect(selectedField, item.value);\n                    }} // Open the action sheet modal\n                    activeOpacity={0.7}\n                    // style={styles.inputIconWrapper}\n                  >\n                    {formikRef.current.getFieldProps(selectedField).value === item.value ? <View style={styles.selectedItem}>\n                      <Text>{item.value}</Text>\n                      <TickIcon />\n                    </View> :\n                    <View style={styles.selectorItem}>\n                      <Text>{item.value}</Text>\n                    </View> }\n                  </TouchableOpacity>\n                ))\n              ) : (\n                <Text>Loading data...</Text>\n              )}\n              </ScrollView>\n            </View>\n          </Modal>\n        </ScrollView>\n      );\n    };\n\n    export default UserProfile;\n"],"mappings":";;;;;AACI,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAoB,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,MAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,gBAAA;AAEvE,SAASC,MAAM,QAAsB,QAAQ;AAE7C,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,OAAOC,KAAK,MAAM,oBAAoB;AACtC,SAASC,iBAAiB;AAC1B,SAASC,OAAO,QAAQ,qCAAqC;AAE7D,SAASC,QAAQ,EAAEC,YAAY,EAAEC,QAAQ;AACzC,OAAOC,cAAc;AACrB,OAAOC,wBAAwB;AAAmC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElE,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAAC,IAAA,EAAmB;EAAA,IAAbC,MAAM,GAAAD,IAAA,CAANC,MAAM;EAE3B,IAAAC,QAAA,GAA2Cf,OAAO,CAAC,CAAC;IAA5CgB,WAAW,GAAAD,QAAA,CAAXC,WAAW;IAAEC,iBAAiB,GAAAF,QAAA,CAAjBE,iBAAiB;EACtC,IAAAC,SAAA,GAA0C7B,QAAQ,CAAC,CAAC,CAAC,CAAC;IAAA8B,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA/CG,aAAa,GAAAF,UAAA;IAAEG,gBAAgB,GAAAH,UAAA;EACtC,IAAAI,UAAA,GAA4ClC,QAAQ,CAAC,EAAE,CAAC;IAAAmC,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAjDE,cAAc,GAAAD,UAAA;IAAEE,iBAAiB,GAAAF,UAAA;EACxC,IAAAG,UAAA,GAAwCtC,QAAQ,CAAC,EAAE,CAAC;IAAAuC,UAAA,GAAAR,cAAA,CAAAO,UAAA;IAA7CE,YAAY,GAAAD,UAAA;IAAEE,eAAe,GAAAF,UAAA;EACpC,IAAAG,UAAA,GAAoD1C,QAAQ,CAAC,EAAE,CAAC;IAAA2C,UAAA,GAAAZ,cAAA,CAAAW,UAAA;IAAzDE,kBAAkB,GAAAD,UAAA;IAAEE,qBAAqB,GAAAF,UAAA;EAChD,IAAAG,UAAA,GAA0C9C,QAAQ,CAAC,EAAE,CAAC;IAAA+C,WAAA,GAAAhB,cAAA,CAAAe,UAAA;IAA/CE,aAAa,GAAAD,WAAA;IAAEE,gBAAgB,GAAAF,WAAA;EACtC,IAAAG,WAAA,GAAsClD,QAAQ,CAAC,IAAI,CAAC;IAAAmD,WAAA,GAAApB,cAAA,CAAAmB,WAAA;IAA7CE,WAAW,GAAAD,WAAA;IAAEE,cAAc,GAAAF,WAAA;EAClC,IAAAG,WAAA,GAAgDtD,QAAQ,CAAC,KAAK,CAAC;IAAAuD,WAAA,GAAAxB,cAAA,CAAAuB,WAAA;IAAxDE,iBAAiB,GAAAD,WAAA;IAAEE,kBAAkB,GAAAF,WAAA;EAC5C,IAAAG,WAAA,GAA8C1D,QAAQ,CAAC,IAAI,CAAC;IAAA2D,WAAA,GAAA5B,cAAA,CAAA2B,WAAA;IAArDE,eAAe,GAAAD,WAAA;IAAEE,kBAAkB,GAAAF,WAAA;EAC1C,IAAAG,WAAA,GAA4C9D,QAAQ,CAAC,CAAC,CAAC,CAAC;IAAA+D,WAAA,GAAAhC,cAAA,CAAA+B,WAAA;IAAjDE,cAAc,GAAAD,WAAA;IAAEE,iBAAiB,GAAAF,WAAA;EACxC,IAAAG,WAAA,GAA4ClE,QAAQ,CAAC,CAAC,CAAC,CAAC;IAAAmE,WAAA,GAAApC,cAAA,CAAAmC,WAAA;IAAjDE,cAAc,GAAAD,WAAA;IAAEE,iBAAiB,GAAAF,WAAA;EAExC,IAAMG,SAAS,GAAGrE,MAAM,CAAC,IAAI,CAAC;EAC9B,IAAMsE,SAAS,GAAG,CAAC,CAAC;EACpB,IAAMC,MAAM,GAAGzD,cAAc,CAAC,CAAC;EAI/BhB,SAAS,CAAC,YAAM;IACd,IAAI4B,WAAW,EAAE;MACfM,gBAAgB,CAAC;QACf,UAAU,EAAEwC,iBAAiB,CAAC9C,WAAW,CAAC+C,QAAQ,IAAI,EAAE,CAAC;QAC7D,UAAU,EAAED,iBAAiB,CAAC9C,WAAW,CAACgD,QAAQ,IAAI,EAAE,CAAC;QACzD,OAAO,EAAEF,iBAAiB,CAAC9C,WAAW,CAACiD,KAAK,IAAI,EAAE,CAAC;QACnD,eAAe,EAAEH,iBAAiB,CAAC9C,WAAW,CAACkD,aAAa,IAAI,EAAE,CAAC;QAC3E,mBAAmB,EAAEJ,iBAAiB,CAAC9C,WAAW,CAACmD,SAAS,CAAC,CAAC,CAAC,GAAGnD,WAAW,CAACmD,SAAS,CAAC,CAAC,CAAC,CAACC,KAAK,GAAE,EAAE,IAAG,EAAE,CAAC;QAC1G,mBAAmB,EAAEN,iBAAiB,CAAC9C,WAAW,CAACmD,SAAS,CAAC,CAAC,CAAC,GAAGnD,WAAW,CAACmD,SAAS,CAAC,CAAC,CAAC,CAACE,KAAK,GAAE,EAAE,IAAG,EAAE,CAAC;QAC1G,sBAAsB,EAAEP,iBAAiB,CAAC9C,WAAW,CAACmD,SAAS,CAAC,CAAC,CAAC,GAAGnD,WAAW,CAACmD,SAAS,CAAC,CAAC,CAAC,CAACG,QAAQ,GAAE,EAAE,IAAG,EAAE,CAAC;QAChH,kBAAkB,EAAER,iBAAiB,CAAC9C,WAAW,CAACmD,SAAS,CAAC,CAAC,CAAC,GAAGnD,WAAW,CAACmD,SAAS,CAAC,CAAC,CAAC,CAACI,IAAI,GAAE,EAAE,IAAG,EAAE,CAAC;QACxG,mBAAmB,EAAET,iBAAiB,CAAC9C,WAAW,CAACmD,SAAS,CAAC,CAAC,CAAC,GAAGnD,WAAW,CAACmD,SAAS,CAAC,CAAC,CAAC,CAACK,KAAK,GAAE,EAAE,IAAG,EAAE,CAAC;QAC1G,oCAAoC,EAAEV,iBAAiB,CAAC9C,WAAW,CAACyD,iBAAiB,CAAC,CAAC,CAAC,GAAGzD,WAAW,CAACyD,iBAAiB,CAAC,CAAC,CAAC,CAACC,cAAc,GAAE,EAAE,IAAG,EAAE,CAAC;QACpJ,sCAAsC,EAAEZ,iBAAiB,CAAC9C,WAAW,CAACyD,iBAAiB,CAAC,CAAC,CAAC,GAAGzD,WAAW,CAACyD,iBAAiB,CAAC,CAAC,CAAC,CAACE,gBAAgB,GAAE,EAAE,IAAG,EAAE,CAAC;QACxJ,iCAAiC,EAAEb,iBAAiB,CAAC9C,WAAW,CAACyD,iBAAiB,CAAC,CAAC,CAAC,GAAGzD,WAAW,CAACyD,iBAAiB,CAAC,CAAC,CAAC,CAACG,WAAW,GAAE,EAAE,IAAG,EAAE,CAAC;QAC9I,gCAAgC,EAAEd,iBAAiB,CAAC9C,WAAW,CAACyD,iBAAiB,CAAC,CAAC,CAAC,GAAGzD,WAAW,CAACyD,iBAAiB,CAAC,CAAC,CAAC,CAACI,UAAU,GAAE,EAAE,IAAG,EAAE,CAAC;QAC5I,8BAA8B,EAAEf,iBAAiB,CAAC9C,WAAW,CAAC8D,aAAa,CAAC,CAAC,CAAC,GAAG9D,WAAW,CAAC8D,aAAa,CAAC,CAAC,CAAC,CAACC,YAAY,GAAE,EAAE,IAAG,EAAE;MAE7H,CACF,CAAC;IACG;EACF,CAAC,EAAE,CAAC/D,WAAW,CAAC,CAAC;EAEjB,IAAM8C,iBAAiB,GAAC,SAAlBA,iBAAiBA,CAAEkB,KAAK,EAAI;IAChC,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7B,OAAOA,KAAK,CAACC,QAAQ,CAAC,CAAC;IACzB;IACA,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;MAC7B,OAAOA,KAAK;IACd;IAEA,OAAO,EAAE;EACX,CAAC;EAGD,IAAME,gBAAgB,GAAG7E,wBAAwB,CAACS,MAAM,CAAC;EAGzD,IAAMqE,oBAAoB;IAAA,IAAAC,KAAA,GAAAC,iBAAA,CAAG,WAAOC,KAAK,EAAK;MAC5C,IAAI;QAAA,IAAAC,UAAA;QACH,IAAMC,QAAQ,SAASzF,iBAAiB,CAAC,CAAE,WAAUuF,KAAM,EAAC,CAAC,CAAC;QAC9DpC,kBAAkB,CAACsC,QAAQ,qBAAAD,UAAA,GAARC,QAAQ,CAAG,CAAC,CAAC,qBAAbD,UAAA,CAAeE,SAAS,CAAC;MAC7C,CAAC,CAAC,OAAOC,KAAK,EAAE;QACfC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC7C;IACF,CAAC;IAAA,gBAPKP,oBAAoBA,CAAAS,EAAA;MAAA,OAAAR,KAAA,CAAAS,KAAA,OAAAC,SAAA;IAAA;EAAA,GAOzB;EAGD,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAIT,KAAK,EAAK;IACtC,IAAI1B,SAAS,CAAC0B,KAAK,CAAC,EAAE;MACpB1B,SAAS,CAAC0B,KAAK,CAAC,CAACU,KAAK,CAAC,CAAC;IAC1B;EACF,CAAC;EAGD,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAIX,KAAK,EAAEN,KAAK,EAAK;IAE3CrB,SAAS,CAACuC,OAAO,CAACC,aAAa,CAACb,KAAK,EAACN,KAAK,CAAC;IAE5CoB,iBAAiB,CAACd,KAAK,EAACN,KAAK,CAAC;IAE9B1B,iBAAiB,CAAA+C,aAAA,CAAAA,aAAA,KACZhD,cAAc,OAAAiD,eAAA,KAChBhB,KAAK,EAAGN,KAAK,EACf,CAAC;IACFuB,cAAc,CAAC,CAAC;EAClB,CAAC;EAKD,IAAMH,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAId,KAAK,EAAEN,KAAK,EAAK;IAC1C,IAAI,oCAAoC,KAAKM,KAAK,EAAE;MAChD,IAAI,YAAY,KAAKN,KAAK,EAAE;QAExBrB,SAAS,CAACuC,OAAO,CAACC,aAAa,CAAC,sCAAsC,EAAE,gBAAgB,CAAC;MAE7F,CAAC,MAAM;QAELxC,SAAS,CAACuC,OAAO,CAACC,aAAa,CAAC,sCAAsC,GAAG,SAAS,EAAE,KAAK,CAAC;MAC5F;MAAC;MACD,IAAI,YAAY,KAAKnB,KAAK,EAAE;QAExBrB,SAAS,CAACuC,OAAO,CAACC,aAAa,CAAC,gCAAgC,GAAG,SAAS,EAAE,IAAI,CAAC;MAEvF,CAAC,MAAM;QAELxC,SAAS,CAACuC,OAAO,CAACC,aAAa,CAAC,gCAAgC,GAAG,SAAS,EAAE,KAAK,CAAC;MACtF;MAAC;IACH;EACJ,CAAC;EAGD,IAAMK,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAAS;IACzB,IAAIvD,eAAe,EAAE;MACpB,IAAIA,eAAe,CAACwD,MAAM,GAAG,CAAC,EAAE;QAC9B,OAAO,KAAK;MACd,CAAC,MAAM,IAAIxD,eAAe,CAACwD,MAAM,GAAG,EAAE,EAAE;QACtC,OAAO,KAAK;MACd,CAAC,MAAK,IAAIxD,eAAe,CAACwD,MAAM,GAAG,EAAE,EAAE;QACrC,OAAO,KAAK;MACd,CAAC,MAAM;QACL,OAAO,KAAK;MACd;IACF;IACA,OAAO,KAAK;EACb,CAAC;EAGD,IAAMF,cAAc,GAAG,SAAjBA,cAAcA,CAAA,EAAS;IAC3BzD,kBAAkB,CAAC,CAACD,iBAAiB,CAAC;EACxC,CAAC;EAGD,IAAM6D,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAIpB,KAAK,EAAK;IAClC5C,cAAc,CAAC4C,KAAK,CAAC;EACvB,CAAC;EAGD,IAAMqB,eAAe,GAAG,SAAlBA,eAAeA,CAAIrB,KAAK,EAAK;IACjC5C,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;EAGD,IAAMkE,WAAW;IAAA,IAAAC,KAAA,GAAAxB,iBAAA,CAAG,WAAOyB,MAAM,EAAK;MACpC,IAAI;QAEF,IAAMC,mBAAmB,GAAG,CAAC,CAAC;QAC9BC,MAAM,CAACC,IAAI,CAACH,MAAM,CAAC,CAACI,OAAO,CAAC,UAACC,SAAS,EAAK;UACzC,IAAIL,MAAM,CAACK,SAAS,CAAC,KAAK9F,aAAa,CAAC8F,SAAS,CAAC,EAAE;YAClDJ,mBAAmB,CAACI,SAAS,CAAC,GAAGL,MAAM,CAACK,SAAS,CAAC;UACpD;QACF,CAAC,CAAC;QAEF,IAAMC,aAAa,GAAEC,iBAAiB,CAACN,mBAAmB,CAAC;QAE3D,IAAIC,MAAM,CAACC,IAAI,CAACG,aAAa,CAAC,CAACX,MAAM,GAAG,CAAC,EAAE;UACzC,MAAMxF,iBAAiB,CAACD,WAAW,CAACsG,MAAM,EAAEF,aAAa,CAAC;UAC1D1F,iBAAiB,CAAC,8BAA8B,CAAC;UACjDI,eAAe,CAAC,EAAE,CAAC;QAGrB,CAAC,MAAM;UACLJ,iBAAiB,CAAC,EAAE,CAAC;UACrBI,eAAe,CAAC,qBAAqB,CAAC;QACxC;MACF,CAAC,CAAC,OAAO4D,KAAK,EAAE;QACdhE,iBAAiB,CAAC,EAAE,CAAC;QACrBI,eAAe,CAAC,0BAA0B,GAAG4D,KAAK,CAAC6B,OAAO,CAAC;MAC7D;IACF,CAAC;IAAA,gBA1BKX,WAAWA,CAAAY,GAAA;MAAA,OAAAX,KAAA,CAAAhB,KAAA,OAAAC,SAAA;IAAA;EAAA,GA0BhB;EAGD,IAAMuB,iBAAiB,GAAC,SAAlBA,iBAAiBA,CAAEI,KAAK,EAAI;IAChC,IAAMC,MAAM,GAAG,CAAC,CAAC;IACjB,KAAK,IAAMC,GAAG,IAAIF,KAAK,EAAE;MACrB,IAAMG,KAAK,GAAGD,GAAG,CAACE,KAAK,CAAC,GAAG,CAAC;MAC5B,IAAIC,aAAa,GAAGJ,MAAM;MAE1B,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,KAAK,CAACnB,MAAM,GAAG,CAAC,EAAEsB,CAAC,EAAE,EAAE;QACvC,IAAMC,IAAI,GAAGJ,KAAK,CAACG,CAAC,CAAC;QAErB,IAAI,CAACD,aAAa,CAACE,IAAI,CAAC,EAAE;UACtB,IAAIC,KAAK,CAACL,KAAK,CAACG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;YACrB,IAAI/G,WAAW,IAAIA,WAAW,CAAC4G,KAAK,CAACG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;cAC5C,IAAI/G,WAAW,CAAC4G,KAAK,CAACG,CAAC,GAAG,CAAC,CAAC,CAAC,CAACtB,MAAM,GAAG,CAAC,EAAE;gBACxCqB,aAAa,CAACE,IAAI,CAAC,GAAG;kBAAC,IAAI,EAAChH,WAAW,CAAC4G,KAAK,CAACG,CAAC,GAAG,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAACE;gBAAE,CAAC;cACjE,CAAC,MAAI;gBACHJ,aAAa,CAACE,IAAI,CAAC,GAAG,CAAC,CAAC;cAC1B;YACF,CAAC,MAAI;cACHF,aAAa,CAACE,IAAI,CAAC,GAAG,CAAC,CAAC;YAC1B;UAEJ,CAAC,MAAM;YACLF,aAAa,CAACE,IAAI,CAAC,GAAG,EAAE;UAC1B;QACJ;QACAF,aAAa,GAAGA,aAAa,CAACE,IAAI,CAAC;MACvC;MAEA,IAAMG,OAAO,GAAGP,KAAK,CAACA,KAAK,CAACnB,MAAM,GAAG,CAAC,CAAC;MACvC,IAAI,CAACwB,KAAK,CAACE,OAAO,CAAC,EAAE;QACjBL,aAAa,CAACM,IAAI,CAAA9B,eAAA,KAAI6B,OAAO,EAAGV,KAAK,CAACE,GAAG,CAAC,CAAE,CAAC;MACjD,CAAC,MAAM;QACHG,aAAa,CAACK,OAAO,CAAC,GAAGV,KAAK,CAACE,GAAG,CAAC;MACvC;IACJ;IAEA,OAAOD,MAAM;EACf,CAAC;EAED,OACEjH,KAAA,CAACf,UAAU;IAAC2I,qBAAqB,EAAExE,MAAM,CAACyE,SAAU;IAAAC,QAAA,GAEjD9G,cAAc,IAAIlB,IAAA,CAACf,IAAI;MAACgJ,KAAK,EAAE3E,MAAM,CAACpC,cAAe;MAAA8G,QAAA,EAAE9G;IAAc,CAAO,CAAC,EAC7EI,YAAY,IAAItB,IAAA,CAACf,IAAI;MAACgJ,KAAK,EAAE3E,MAAM,CAAChC,YAAa;MAAA0G,QAAA,EAAE1G;IAAY,CAAO,CAAC,EACxEtB,IAAA,CAACX,MAAM;MACL6I,QAAQ,EAAE9E,SAAU;MACpB+E,kBAAkB;MAClBrH,aAAa,EAAEA,aAAc;MAC7B6D,gBAAgB,EAAEA,gBAAiB;MACnCyD,QAAQ,EAAE/B,WAAY;MAAA2B,QAAA,EAErB,SAAAA,SAAAK,KAAA,EAA6D;QAAA,IAA1DC,YAAY,GAAAD,KAAA,CAAZC,YAAY;UAAEC,YAAY,GAAAF,KAAA,CAAZE,YAAY;UAAEhC,MAAM,GAAA8B,KAAA,CAAN9B,MAAM;UAAEiC,MAAM,GAAAH,KAAA,CAANG,MAAM;UAAEC,OAAO,GAAAJ,KAAA,CAAPI,OAAO;QACrD,OACEvI,KAAA,CAAAE,SAAA;UAAA4H,QAAA,GAGEhI,IAAA,CAAChB,IAAI;YACH0J,MAAM,EAAE,qCAAsC;YAC9CT,KAAK,EAAE3E,MAAM,CAACqF,QAAS;YAAAX,QAAA,EAEvBhI,IAAA,CAACf,IAAI;cAACgJ,KAAK,EAAE3E,MAAM,CAACsF,QAAS;cAAAZ,QAAA,EAAC;YAAgB,CAAM;UAAC,CACjD,CAAC,EAGN,CAACzB,MAAM,CAAC,iBAAiB,CAAC,IAAIvG,IAAA,CAAChB,IAAI;YAClC0J,MAAM,EAAE,8BAA+B;YACvCT,KAAK,EAAE3E,MAAM,CAACqF,QAAS;YAAAX,QAAA,EAEvBhI,IAAA,CAAChB,IAAI;cAACiJ,KAAK,EAAE3E,MAAM,CAACuF,YAAa;cAAAb,QAAA,EAC/B9H,KAAA,CAAClB,IAAI;gBACHiJ,KAAK,EAAE,CACL3E,MAAM,CAACwF,YAAY,EACnB5G,WAAW,KAAK,UAAU,GAAGoB,MAAM,CAACpB,WAAW,GAAG,IAAI,CACtD;gBAAA8F,QAAA,GAEFhI,IAAA,CAACV,SAAS;kBACRoJ,MAAM,EAAE,+BAAgC;kBACxCT,KAAK,EAAE,CACL3E,MAAM,CAAC4D,KAAK,EACZX,MAAM,CAAC,UAAU,CAAC,KAAKzF,aAAa,CAAC,UAAU,CAAC,GAC5CwC,MAAM,CAACyF,UAAU,GACjB,IAAI,CACR;kBACFC,KAAK,EAAE,0CAA2C;kBAClDC,IAAI,EAAE,UAAW;kBACjBC,YAAY,EAAEX,YAAY,CAAC,UAAU,CAAE;kBACvC9D,KAAK,EAAE8B,MAAM,CAAC,UAAU,CAAE;kBAC1B4C,MAAM,EAAEb,YAAa;kBACrBc,OAAO,EAAE,SAAAA,QAAA;oBAAA,OAAMjD,gBAAgB,CAAC,UAAU,CAAC;kBAAA,CAAC;kBAC5CkD,QAAQ,EAAE,IAAK;kBACfC,cAAc,EAAC,aAAa;kBAC5BC,cAAc,EAAE;oBACdC,OAAO,EAAE;kBACX,CAAE;kBACFL,MAAM,EAAE/C,eAAgB;kBACxBqD,GAAG,EAAE,SAAAA,IAACA,KAAG;oBAAA,OAAMpG,SAAS,CAAC,UAAU,CAAC,GAAGoG,KAAG;kBAAA;gBAAE,CAC7C,CAAC,EACFzJ,IAAA,CAACZ,gBAAgB;kBACfsK,OAAO,EAAE,SAAAA,QAAA;oBAAA,OAAMlE,oBAAoB,CAAC,UAAU,CAAC;kBAAA,CAAC;kBAChDmE,aAAa,EAAE,GAAI;kBACnB1B,KAAK,EAAE3E,MAAM,CAACsG,gBAAiB;kBAAA5B,QAAA,EAE/BhI,IAAA,CAACN,QAAQ,IAAE;gBAAC,CACI,CAAC;cAAA,CACf;YAAC,CACH;UAAC,CACH,CAAC,EAGN,CAAC6G,MAAM,CAAC,iBAAiB,CAAC,IAAIvG,IAAA,CAAChB,IAAI;YAClC0J,MAAM,EAAE,8BAA+B;YACvCT,KAAK,EAAE3E,MAAM,CAACqF,QAAS;YAAAX,QAAA,EAEvBhI,IAAA,CAAChB,IAAI;cAACiJ,KAAK,EAAE3E,MAAM,CAACuF,YAAa;cAAAb,QAAA,EAC/B9H,KAAA,CAAClB,IAAI;gBACHiJ,KAAK,EAAE,CACL3E,MAAM,CAACwF,YAAY,EACnB5G,WAAW,KAAK,UAAU,GAAGoB,MAAM,CAACpB,WAAW,GAAG,IAAI,CACtD;gBAAA8F,QAAA,GAEFhI,IAAA,CAACV,SAAS;kBACRoJ,MAAM,EAAE,iCAAkC;kBAC1CT,KAAK,EAAE,CACL3E,MAAM,CAAC4D,KAAK,EACZX,MAAM,CAAC,UAAU,CAAC,KAAKzF,aAAa,CAAC,UAAU,CAAC,GAC5CwC,MAAM,CAACyF,UAAU,GACjB,IAAI,CACR;kBACFC,KAAK,EAAE,UAAW;kBAClBC,IAAI,EAAE,UAAW;kBACjBxE,KAAK,EAAE3B,cAAc,CAAC,UAAU,CAAC,IAAIyD,MAAM,CAAC,UAAU,CAAE;kBACxD6C,OAAO,EAAE,SAAAA,QAAA;oBAAA,OAAMjD,gBAAgB,CAAC,UAAU,CAAC;kBAAA,CAAC;kBAC5CkD,QAAQ,EAAE,IAAK;kBACfC,cAAc,EAAC,aAAa;kBAC5BC,cAAc,EAAE;oBACdC,OAAO,EAAE;kBACX,CAAE;kBACFL,MAAM,EAAE/C,eAAgB;kBACxBqD,GAAG,EAAE,SAAAA,IAACA,KAAG;oBAAA,OAAMpG,SAAS,CAAC,UAAU,CAAC,GAAGoG,KAAG;kBAAA;gBAAE,CAC7C,CAAC,EACFzJ,IAAA,CAACZ,gBAAgB;kBACfsK,OAAO,EAAE,SAAAA,QAAA,EAAM;oBACb/H,qBAAqB,CAAC,UAAU,CAAC;oBACjCI,gBAAgB,CAAC,UAAU,CAAC;oBAC5BiE,cAAc,CAAC,CAAC;oBAEhB,IAAI,UAAU,CAAC6D,QAAQ,CAAC,GAAG,CAAC,EAAE;sBAC5B,IAAMC,QAAQ,GAAG,UAAU,CAACxC,KAAK,CAAC,GAAG,CAAC,CAACyC,GAAG,CAAC,CAAC;sBAC5CnF,oBAAoB,CAACkF,QAAQ,CAAC;oBAChC,CAAC,MAAM;sBACLlF,oBAAoB,CAAC,UAAU,CAAC;oBAClC;kBACF,CAAE;kBACF+E,aAAa,EAAE,GAAI;kBACnB1B,KAAK,EAAE3E,MAAM,CAACsG,gBAAiB;kBAAA5B,QAAA,EAE/BhI,IAAA,CAACL,YAAY,IAAE;gBAAC,CACA,CAAC;cAAA,CACf;YAAC,CACH;UAAC,CACH,CAAC,EAGN,CAAC4G,MAAM,CAAC,cAAc,CAAC,IAAIvG,IAAA,CAAChB,IAAI;YAC/B0J,MAAM,EAAE,2BAA4B;YACpCT,KAAK,EAAE3E,MAAM,CAACqF,QAAS;YAAAX,QAAA,EAEvBhI,IAAA,CAAChB,IAAI;cAACiJ,KAAK,EAAE3E,MAAM,CAACuF,YAAa;cAAAb,QAAA,EAC/B9H,KAAA,CAAClB,IAAI;gBACHiJ,KAAK,EAAE,CACL3E,MAAM,CAACwF,YAAY,EACnB5G,WAAW,KAAK,OAAO,GAAGoB,MAAM,CAACpB,WAAW,GAAG,IAAI,CACnD;gBAAA8F,QAAA,GAEFhI,IAAA,CAACV,SAAS;kBACRoJ,MAAM,EAAE,4BAA6B;kBACrCT,KAAK,EAAE,CACL3E,MAAM,CAAC4D,KAAK,EACZX,MAAM,CAAC,OAAO,CAAC,KAAKzF,aAAa,CAAC,OAAO,CAAC,GACtCwC,MAAM,CAACyF,UAAU,GACjB,IAAI,CACR;kBACFC,KAAK,EAAE,OAAQ;kBACfC,IAAI,EAAE,OAAQ;kBACdC,YAAY,EAAEX,YAAY,CAAC,OAAO,CAAE;kBACpC9D,KAAK,EAAE8B,MAAM,CAAC,OAAO,CAAE;kBACvB4C,MAAM,EAAEb,YAAa;kBACrBc,OAAO,EAAE,SAAAA,QAAA;oBAAA,OAAMjD,gBAAgB,CAAC,OAAO,CAAC;kBAAA,CAAC;kBACzCkD,QAAQ,EAAE,IAAK;kBACfC,cAAc,EAAC,aAAa;kBAC5BC,cAAc,EAAE;oBACdC,OAAO,EAAE;kBACX,CAAE;kBACFL,MAAM,EAAE/C,eAAgB;kBACxBqD,GAAG,EAAE,SAAAA,IAACA,KAAG;oBAAA,OAAMpG,SAAS,CAAC,OAAO,CAAC,GAAGoG,KAAG;kBAAA;gBAAE,CAC1C,CAAC,EACFzJ,IAAA,CAACZ,gBAAgB;kBACfsK,OAAO,EAAE,SAAAA,QAAA;oBAAA,OAAMlE,oBAAoB,CAAC,OAAO,CAAC;kBAAA,CAAC;kBAC7CmE,aAAa,EAAE,GAAI;kBACnB1B,KAAK,EAAE3E,MAAM,CAACsG,gBAAiB;kBAAA5B,QAAA,EAE/BhI,IAAA,CAACN,QAAQ,IAAE;gBAAC,CACI,CAAC;cAAA,CACf;YAAC,CACH;UAAC,CACH,CAAC,EAGN,CAAC6G,MAAM,CAAC,sBAAsB,CAAC,IAAIvG,IAAA,CAAChB,IAAI;YACvC0J,MAAM,EAAE,mCAAoC;YAC5CT,KAAK,EAAE3E,MAAM,CAACqF,QAAS;YAAAX,QAAA,EAEvBhI,IAAA,CAAChB,IAAI;cAACiJ,KAAK,EAAE3E,MAAM,CAACuF,YAAa;cAAAb,QAAA,EAC/B9H,KAAA,CAAClB,IAAI;gBACHiJ,KAAK,EAAE,CACL3E,MAAM,CAACwF,YAAY,EACnB5G,WAAW,KAAK,eAAe,GAAGoB,MAAM,CAACpB,WAAW,GAAG,IAAI,CAC3D;gBAAA8F,QAAA,GAEFhI,IAAA,CAACV,SAAS;kBACRoJ,MAAM,EAAE,sCAAuC;kBAC/CT,KAAK,EAAE,CACL3E,MAAM,CAAC4D,KAAK,EACZX,MAAM,CAAC,eAAe,CAAC,KAAKzF,aAAa,CAAC,eAAe,CAAC,GACtDwC,MAAM,CAACyF,UAAU,GACjB,IAAI,CACR;kBACFC,KAAK,EAAE,gBAAiB;kBACxBC,IAAI,EAAE,eAAgB;kBACtBxE,KAAK,EAAE3B,cAAc,CAAC,eAAe,CAAC,IAAIyD,MAAM,CAAC,eAAe,CAAE;kBAClE6C,OAAO,EAAE,SAAAA,QAAA;oBAAA,OAAMjD,gBAAgB,CAAC,eAAe,CAAC;kBAAA,CAAC;kBACjDkD,QAAQ,EAAE,IAAK;kBACfC,cAAc,EAAC,aAAa;kBAC5BC,cAAc,EAAE;oBACdC,OAAO,EAAE;kBACX,CAAE;kBACFL,MAAM,EAAE/C,eAAgB;kBACxBqD,GAAG,EAAE,SAAAA,IAACA,KAAG;oBAAA,OAAMpG,SAAS,CAAC,eAAe,CAAC,GAAGoG,KAAG;kBAAA;gBAAE,CAClD,CAAC,EACFzJ,IAAA,CAACZ,gBAAgB;kBACfsK,OAAO,EAAE,SAAAA,QAAA,EAAM;oBACb/H,qBAAqB,CAAC,gBAAgB,CAAC;oBACvCI,gBAAgB,CAAC,eAAe,CAAC;oBACjCiE,cAAc,CAAC,CAAC;oBAEhB,IAAI,eAAe,CAAC6D,QAAQ,CAAC,GAAG,CAAC,EAAE;sBACjC,IAAMC,QAAQ,GAAG,eAAe,CAACxC,KAAK,CAAC,GAAG,CAAC,CAACyC,GAAG,CAAC,CAAC;sBACjDnF,oBAAoB,CAACkF,QAAQ,CAAC;oBAChC,CAAC,MAAM;sBACLlF,oBAAoB,CAAC,eAAe,CAAC;oBACvC;kBACF,CAAE;kBACF+E,aAAa,EAAE,GAAI;kBACnB1B,KAAK,EAAE3E,MAAM,CAACsG,gBAAiB;kBAAA5B,QAAA,EAE/BhI,IAAA,CAACL,YAAY,IAAE;gBAAC,CACA,CAAC;cAAA,CACf;YAAC,CACH;UAAC,CACH,CAAC,EAGPK,IAAA,CAAChB,IAAI;YACH0J,MAAM,EAAE,2CAA4C;YACpDT,KAAK,EAAE3E,MAAM,CAACqF,QAAS;YAAAX,QAAA,EAEvBhI,IAAA,CAACf,IAAI;cAACgJ,KAAK,EAAE3E,MAAM,CAACsF,QAAS;cAAAZ,QAAA,EAAC;YAAe,CAAM;UAAC,CAChD,CAAC,EAGN,CAACzB,MAAM,CAAC,0BAA0B,CAAC,IAAIvG,IAAA,CAAChB,IAAI;YAC3C0J,MAAM,EAAE,uCAAwC;YAChDT,KAAK,EAAE3E,MAAM,CAACqF,QAAS;YAAAX,QAAA,EAEvBhI,IAAA,CAAChB,IAAI;cAACiJ,KAAK,EAAE3E,MAAM,CAACuF,YAAa;cAAAb,QAAA,EAC/B9H,KAAA,CAAClB,IAAI;gBACHiJ,KAAK,EAAE,CACL3E,MAAM,CAACwF,YAAY,EACnB5G,WAAW,KAAK,mBAAmB,GAAGoB,MAAM,CAACpB,WAAW,GAAG,IAAI,CAC/D;gBAAA8F,QAAA,GAEFhI,IAAA,CAACV,SAAS;kBACRoJ,MAAM,EAAE,wCAAyC;kBACjDT,KAAK,EAAE,CACL3E,MAAM,CAAC4D,KAAK,EACZX,MAAM,CAAC,mBAAmB,CAAC,KAAKzF,aAAa,CAAC,mBAAmB,CAAC,GAC9DwC,MAAM,CAACyF,UAAU,GACjB,IAAI,CACR;kBACFC,KAAK,EAAE,gBAAiB;kBACxBC,IAAI,EAAE,mBAAoB;kBAC1BC,YAAY,EAAEX,YAAY,CAAC,mBAAmB,CAAE;kBAChD9D,KAAK,EAAE8B,MAAM,CAAC,mBAAmB,CAAE;kBACnC4C,MAAM,EAAEb,YAAa;kBACrBc,OAAO,EAAE,SAAAA,QAAA;oBAAA,OAAMjD,gBAAgB,CAAC,mBAAmB,CAAC;kBAAA,CAAC;kBACrDkD,QAAQ,EAAE,IAAK;kBACfC,cAAc,EAAC,aAAa;kBAC5BC,cAAc,EAAE;oBACdC,OAAO,EAAE;kBACX,CAAE;kBACFL,MAAM,EAAE/C,eAAgB;kBACxBqD,GAAG,EAAE,SAAAA,IAACA,KAAG;oBAAA,OAAMpG,SAAS,CAAC,mBAAmB,CAAC,GAAGoG,KAAG;kBAAA;gBAAE,CACtD,CAAC,EACFzJ,IAAA,CAACZ,gBAAgB;kBACfsK,OAAO,EAAE,SAAAA,QAAA;oBAAA,OAAMlE,oBAAoB,CAAC,mBAAmB,CAAC;kBAAA,CAAC;kBACzDmE,aAAa,EAAE,GAAI;kBACnB1B,KAAK,EAAE3E,MAAM,CAACsG,gBAAiB;kBAAA5B,QAAA,EAE/BhI,IAAA,CAACN,QAAQ,IAAE;gBAAC,CACI,CAAC;cAAA,CACf;YAAC,CACH;UAAC,CACH,CAAC,EAGN,CAAC6G,MAAM,CAAC,0BAA0B,CAAC,IAAIvG,IAAA,CAAChB,IAAI;YAC3C0J,MAAM,EAAE,uCAAwC;YAChDT,KAAK,EAAE3E,MAAM,CAACqF,QAAS;YAAAX,QAAA,EAEvBhI,IAAA,CAAChB,IAAI;cAACiJ,KAAK,EAAE3E,MAAM,CAACuF,YAAa;cAAAb,QAAA,EAC/B9H,KAAA,CAAClB,IAAI;gBACHiJ,KAAK,EAAE,CACL3E,MAAM,CAACwF,YAAY,EACnB5G,WAAW,KAAK,mBAAmB,GAAGoB,MAAM,CAACpB,WAAW,GAAG,IAAI,CAC/D;gBAAA8F,QAAA,GAEFhI,IAAA,CAACV,SAAS;kBACRoJ,MAAM,EAAE,wCAAyC;kBACjDT,KAAK,EAAE,CACL3E,MAAM,CAAC4D,KAAK,EACZX,MAAM,CAAC,mBAAmB,CAAC,KAAKzF,aAAa,CAAC,mBAAmB,CAAC,GAC9DwC,MAAM,CAACyF,UAAU,GACjB,IAAI,CACR;kBACFC,KAAK,EAAE,2BAA4B;kBACnCC,IAAI,EAAE,mBAAoB;kBAC1BC,YAAY,EAAEX,YAAY,CAAC,mBAAmB,CAAE;kBAChD9D,KAAK,EAAE8B,MAAM,CAAC,mBAAmB,CAAE;kBACnC4C,MAAM,EAAEb,YAAa;kBACrBc,OAAO,EAAE,SAAAA,QAAA;oBAAA,OAAMjD,gBAAgB,CAAC,mBAAmB,CAAC;kBAAA,CAAC;kBACrDkD,QAAQ,EAAE,IAAK;kBACfC,cAAc,EAAC,aAAa;kBAC5BC,cAAc,EAAE;oBACdC,OAAO,EAAE;kBACX,CAAE;kBACFL,MAAM,EAAE/C,eAAgB;kBACxBqD,GAAG,EAAE,SAAAA,IAACA,MAAG;oBAAA,OAAMpG,SAAS,CAAC,mBAAmB,CAAC,GAAGoG,MAAG;kBAAA;gBAAE,CACtD,CAAC,EACFzJ,IAAA,CAACZ,gBAAgB;kBACfsK,OAAO,EAAE,SAAAA,QAAA;oBAAA,OAAMlE,oBAAoB,CAAC,mBAAmB,CAAC;kBAAA,CAAC;kBACzDmE,aAAa,EAAE,GAAI;kBACnB1B,KAAK,EAAE3E,MAAM,CAACsG,gBAAiB;kBAAA5B,QAAA,EAE/BhI,IAAA,CAACN,QAAQ,IAAE;gBAAC,CACI,CAAC;cAAA,CACf;YAAC,CACH;UAAC,CACH,CAAC,EAGN,CAAC6G,MAAM,CAAC,6BAA6B,CAAC,IAAIvG,IAAA,CAAChB,IAAI;YAC9C0J,MAAM,EAAE,0CAA2C;YACnDT,KAAK,EAAE3E,MAAM,CAACqF,QAAS;YAAAX,QAAA,EAEvBhI,IAAA,CAAChB,IAAI;cAACiJ,KAAK,EAAE3E,MAAM,CAACuF,YAAa;cAAAb,QAAA,EAC/B9H,KAAA,CAAClB,IAAI;gBACHiJ,KAAK,EAAE,CACL3E,MAAM,CAACwF,YAAY,EACnB5G,WAAW,KAAK,sBAAsB,GAAGoB,MAAM,CAACpB,WAAW,GAAG,IAAI,CAClE;gBAAA8F,QAAA,GAEFhI,IAAA,CAACV,SAAS;kBACRoJ,MAAM,EAAE,2CAA4C;kBACpDT,KAAK,EAAE,CACL3E,MAAM,CAAC4D,KAAK,EACZX,MAAM,CAAC,sBAAsB,CAAC,KAAKzF,aAAa,CAAC,sBAAsB,CAAC,GACpEwC,MAAM,CAACyF,UAAU,GACjB,IAAI,CACR;kBACFC,KAAK,EAAE,UAAW;kBAClBC,IAAI,EAAE,sBAAuB;kBAC7BC,YAAY,EAAEX,YAAY,CAAC,sBAAsB,CAAE;kBACnD9D,KAAK,EAAE8B,MAAM,CAAC,sBAAsB,CAAE;kBACtC4C,MAAM,EAAEb,YAAa;kBACrBc,OAAO,EAAE,SAAAA,QAAA;oBAAA,OAAMjD,gBAAgB,CAAC,sBAAsB,CAAC;kBAAA,CAAC;kBACxDkD,QAAQ,EAAE,IAAK;kBACfC,cAAc,EAAC,aAAa;kBAC5BC,cAAc,EAAE;oBACdC,OAAO,EAAE;kBACX,CAAE;kBACFL,MAAM,EAAE/C,eAAgB;kBACxBqD,GAAG,EAAE,SAAAA,IAACA,MAAG;oBAAA,OAAMpG,SAAS,CAAC,sBAAsB,CAAC,GAAGoG,MAAG;kBAAA;gBAAE,CACzD,CAAC,EACFzJ,IAAA,CAACZ,gBAAgB;kBACfsK,OAAO,EAAE,SAAAA,QAAA;oBAAA,OAAMlE,oBAAoB,CAAC,sBAAsB,CAAC;kBAAA,CAAC;kBAC5DmE,aAAa,EAAE,GAAI;kBACnB1B,KAAK,EAAE3E,MAAM,CAACsG,gBAAiB;kBAAA5B,QAAA,EAE/BhI,IAAA,CAACN,QAAQ,IAAE;gBAAC,CACI,CAAC;cAAA,CACf;YAAC,CACH;UAAC,CACH,CAAC,EAGN,CAAC6G,MAAM,CAAC,yBAAyB,CAAC,IAAIvG,IAAA,CAAChB,IAAI;YAC1C0J,MAAM,EAAE,sCAAuC;YAC/CT,KAAK,EAAE3E,MAAM,CAACqF,QAAS;YAAAX,QAAA,EAEvBhI,IAAA,CAAChB,IAAI;cAACiJ,KAAK,EAAE3E,MAAM,CAACuF,YAAa;cAAAb,QAAA,EAC/B9H,KAAA,CAAClB,IAAI;gBACHiJ,KAAK,EAAE,CACL3E,MAAM,CAACwF,YAAY,EACnB5G,WAAW,KAAK,kBAAkB,GAAGoB,MAAM,CAACpB,WAAW,GAAG,IAAI,CAC9D;gBAAA8F,QAAA,GAEFhI,IAAA,CAACV,SAAS;kBACRoJ,MAAM,EAAE,yCAA0C;kBAClDT,KAAK,EAAE,CACL3E,MAAM,CAAC4D,KAAK,EACZX,MAAM,CAAC,kBAAkB,CAAC,KAAKzF,aAAa,CAAC,kBAAkB,CAAC,GAC5DwC,MAAM,CAACyF,UAAU,GACjB,IAAI,CACR;kBACFC,KAAK,EAAE,MAAO;kBACdC,IAAI,EAAE,kBAAmB;kBACzBxE,KAAK,EAAE3B,cAAc,CAAC,kBAAkB,CAAC,IAAIyD,MAAM,CAAC,kBAAkB,CAAE;kBACxE6C,OAAO,EAAE,SAAAA,QAAA;oBAAA,OAAMjD,gBAAgB,CAAC,kBAAkB,CAAC;kBAAA,CAAC;kBACpDkD,QAAQ,EAAE,IAAK;kBACfC,cAAc,EAAC,aAAa;kBAC5BC,cAAc,EAAE;oBACdC,OAAO,EAAE;kBACX,CAAE;kBACFL,MAAM,EAAE/C,eAAgB;kBACxBqD,GAAG,EAAE,SAAAA,IAACA,MAAG;oBAAA,OAAMpG,SAAS,CAAC,kBAAkB,CAAC,GAAGoG,MAAG;kBAAA;gBAAE,CACrD,CAAC,EACFzJ,IAAA,CAACZ,gBAAgB;kBACfsK,OAAO,EAAE,SAAAA,QAAA,EAAM;oBACb/H,qBAAqB,CAAC,MAAM,CAAC;oBAC7BI,gBAAgB,CAAC,kBAAkB,CAAC;oBACpCiE,cAAc,CAAC,CAAC;oBAEhB,IAAI,kBAAkB,CAAC6D,QAAQ,CAAC,GAAG,CAAC,EAAE;sBACpC,IAAMC,QAAQ,GAAG,kBAAkB,CAACxC,KAAK,CAAC,GAAG,CAAC,CAACyC,GAAG,CAAC,CAAC;sBACpDnF,oBAAoB,CAACkF,QAAQ,CAAC;oBAChC,CAAC,MAAM;sBACLlF,oBAAoB,CAAC,kBAAkB,CAAC;oBAC1C;kBACF,CAAE;kBACF+E,aAAa,EAAE,GAAI;kBACnB1B,KAAK,EAAE3E,MAAM,CAACsG,gBAAiB;kBAAA5B,QAAA,EAE/BhI,IAAA,CAACL,YAAY,IAAE;gBAAC,CACA,CAAC;cAAA,CACf;YAAC,CACH;UAAC,CACH,CAAC,EAGN,CAAC4G,MAAM,CAAC,0BAA0B,CAAC,IAAIvG,IAAA,CAAChB,IAAI;YAC3C0J,MAAM,EAAE,uCAAwC;YAChDT,KAAK,EAAE3E,MAAM,CAACqF,QAAS;YAAAX,QAAA,EAEvBhI,IAAA,CAAChB,IAAI;cAACiJ,KAAK,EAAE3E,MAAM,CAACuF,YAAa;cAAAb,QAAA,EAC/B9H,KAAA,CAAClB,IAAI;gBACHiJ,KAAK,EAAE,CACL3E,MAAM,CAACwF,YAAY,EACnB5G,WAAW,KAAK,mBAAmB,GAAGoB,MAAM,CAACpB,WAAW,GAAG,IAAI,CAC/D;gBAAA8F,QAAA,GAEFhI,IAAA,CAACV,SAAS;kBACRoJ,MAAM,EAAE,0CAA2C;kBACnDT,KAAK,EAAE,CACL3E,MAAM,CAAC4D,KAAK,EACZX,MAAM,CAAC,mBAAmB,CAAC,KAAKzF,aAAa,CAAC,mBAAmB,CAAC,GAC9DwC,MAAM,CAACyF,UAAU,GACjB,IAAI,CACR;kBACFC,KAAK,EAAE,OAAQ;kBACfC,IAAI,EAAE,mBAAoB;kBAC1BxE,KAAK,EAAE3B,cAAc,CAAC,mBAAmB,CAAC,IAAIyD,MAAM,CAAC,mBAAmB,CAAE;kBAC1E6C,OAAO,EAAE,SAAAA,QAAA;oBAAA,OAAMjD,gBAAgB,CAAC,mBAAmB,CAAC;kBAAA,CAAC;kBACrDkD,QAAQ,EAAE,IAAK;kBACfC,cAAc,EAAC,aAAa;kBAC5BC,cAAc,EAAE;oBACdC,OAAO,EAAE;kBACX,CAAE;kBACFL,MAAM,EAAE/C,eAAgB;kBACxBqD,GAAG,EAAE,SAAAA,IAACA,MAAG;oBAAA,OAAMpG,SAAS,CAAC,mBAAmB,CAAC,GAAGoG,MAAG;kBAAA;gBAAE,CACtD,CAAC,EACFzJ,IAAA,CAACZ,gBAAgB;kBACfsK,OAAO,EAAE,SAAAA,QAAA,EAAM;oBACb/H,qBAAqB,CAAC,OAAO,CAAC;oBAC9BI,gBAAgB,CAAC,mBAAmB,CAAC;oBACrCiE,cAAc,CAAC,CAAC;oBAEhB,IAAI,mBAAmB,CAAC6D,QAAQ,CAAC,GAAG,CAAC,EAAE;sBACrC,IAAMC,QAAQ,GAAG,mBAAmB,CAACxC,KAAK,CAAC,GAAG,CAAC,CAACyC,GAAG,CAAC,CAAC;sBACrDnF,oBAAoB,CAACkF,QAAQ,CAAC;oBAChC,CAAC,MAAM;sBACLlF,oBAAoB,CAAC,mBAAmB,CAAC;oBAC3C;kBACF,CAAE;kBACF+E,aAAa,EAAE,GAAI;kBACnB1B,KAAK,EAAE3E,MAAM,CAACsG,gBAAiB;kBAAA5B,QAAA,EAE/BhI,IAAA,CAACL,YAAY,IAAE;gBAAC,CACA,CAAC;cAAA,CACf;YAAC,CACH;UAAC,CACH,CAAC,EAGPK,IAAA,CAAChB,IAAI;YACH0J,MAAM,EAAE,uCAAwC;YAChDT,KAAK,EAAE3E,MAAM,CAACqF,QAAS;YAAAX,QAAA,EAEvBhI,IAAA,CAACf,IAAI;cAACgJ,KAAK,EAAE3E,MAAM,CAACsF,QAAS;cAAAZ,QAAA,EAAC;YAAkB,CAAM;UAAC,CACnD,CAAC,EAGN,CAACzB,MAAM,CAAC,2CAA2C,CAAC,IAAIvG,IAAA,CAAChB,IAAI;YAC5D0J,MAAM,EAAE,wDAAyD;YACjET,KAAK,EAAE3E,MAAM,CAACqF,QAAS;YAAAX,QAAA,EAEvBhI,IAAA,CAAChB,IAAI;cAACiJ,KAAK,EAAE3E,MAAM,CAACuF,YAAa;cAAAb,QAAA,EAC/B9H,KAAA,CAAClB,IAAI;gBACHiJ,KAAK,EAAE,CACL3E,MAAM,CAACwF,YAAY,EACnB5G,WAAW,KAAK,oCAAoC,GAAGoB,MAAM,CAACpB,WAAW,GAAG,IAAI,CAChF;gBAAA8F,QAAA,GAEFhI,IAAA,CAACV,SAAS;kBACRoJ,MAAM,EAAE,2DAA4D;kBACpET,KAAK,EAAE,CACL3E,MAAM,CAAC4D,KAAK,EACZX,MAAM,CAAC,oCAAoC,CAAC,KAAKzF,aAAa,CAAC,oCAAoC,CAAC,GAChGwC,MAAM,CAACyF,UAAU,GACjB,IAAI,CACR;kBACFC,KAAK,EAAE,iBAAkB;kBACzBC,IAAI,EAAE,oCAAqC;kBAC3CxE,KAAK,EAAE3B,cAAc,CAAC,oCAAoC,CAAC,IAAIyD,MAAM,CAAC,oCAAoC,CAAE;kBAC5G6C,OAAO,EAAE,SAAAA,QAAA;oBAAA,OAAMjD,gBAAgB,CAAC,oCAAoC,CAAC;kBAAA,CAAC;kBACtEkD,QAAQ,EAAE,IAAK;kBACfC,cAAc,EAAC,aAAa;kBAC5BC,cAAc,EAAE;oBACdC,OAAO,EAAE;kBACX,CAAE;kBACFL,MAAM,EAAE/C,eAAgB;kBACxBqD,GAAG,EAAE,SAAAA,IAACA,MAAG;oBAAA,OAAMpG,SAAS,CAAC,oCAAoC,CAAC,GAAGoG,MAAG;kBAAA;gBAAE,CACvE,CAAC,EACFzJ,IAAA,CAACZ,gBAAgB;kBACfsK,OAAO,EAAE,SAAAA,QAAA,EAAM;oBACb/H,qBAAqB,CAAC,iBAAiB,CAAC;oBACxCI,gBAAgB,CAAC,oCAAoC,CAAC;oBACtDiE,cAAc,CAAC,CAAC;oBAEhB,IAAI,oCAAoC,CAAC6D,QAAQ,CAAC,GAAG,CAAC,EAAE;sBACtD,IAAMC,QAAQ,GAAG,oCAAoC,CAACxC,KAAK,CAAC,GAAG,CAAC,CAACyC,GAAG,CAAC,CAAC;sBACtEnF,oBAAoB,CAACkF,QAAQ,CAAC;oBAChC,CAAC,MAAM;sBACLlF,oBAAoB,CAAC,oCAAoC,CAAC;oBAC5D;kBACF,CAAE;kBACF+E,aAAa,EAAE,GAAI;kBACnB1B,KAAK,EAAE3E,MAAM,CAACsG,gBAAiB;kBAAA5B,QAAA,EAE/BhI,IAAA,CAACL,YAAY,IAAE;gBAAC,CACA,CAAC;cAAA,CACf;YAAC,CACH;UAAC,CACH,CAAC,EAGN,CAAC4G,MAAM,CAAC,6CAA6C,CAAC,IAAIvG,IAAA,CAAChB,IAAI;YAC9D0J,MAAM,EAAE,0DAA2D;YACnET,KAAK,EAAE3E,MAAM,CAACqF,QAAS;YAAAX,QAAA,EAEvBhI,IAAA,CAAChB,IAAI;cAACiJ,KAAK,EAAE3E,MAAM,CAACuF,YAAa;cAAAb,QAAA,EAC/B9H,KAAA,CAAClB,IAAI;gBACHiJ,KAAK,EAAE,CACL3E,MAAM,CAACwF,YAAY,EACnB5G,WAAW,KAAK,sCAAsC,GAAGoB,MAAM,CAACpB,WAAW,GAAG,IAAI,CAClF;gBAAA8F,QAAA,GAEFhI,IAAA,CAACV,SAAS;kBACRoJ,MAAM,EAAE,6DAA8D;kBACtET,KAAK,EAAE,CACL3E,MAAM,CAAC4D,KAAK,EACZX,MAAM,CAAC,sCAAsC,CAAC,KAAKzF,aAAa,CAAC,sCAAsC,CAAC,GACpGwC,MAAM,CAACyF,UAAU,GACjB,IAAI,CACR;kBACFC,KAAK,EAAE,mBAAoB;kBAC3BC,IAAI,EAAE,sCAAuC;kBAC7CxE,KAAK,EAAE3B,cAAc,CAAC,sCAAsC,CAAC,IAAIyD,MAAM,CAAC,sCAAsC,CAAE;kBAChH6C,OAAO,EAAE,SAAAA,QAAA;oBAAA,OAAMjD,gBAAgB,CAAC,sCAAsC,CAAC;kBAAA,CAAC;kBACxEkD,QAAQ,EAAE,IAAK;kBACfC,cAAc,EAAC,aAAa;kBAC5BC,cAAc,EAAE;oBACdC,OAAO,EAAE;kBACX,CAAE;kBACFL,MAAM,EAAE/C,eAAgB;kBACxBqD,GAAG,EAAE,SAAAA,IAACA,MAAG;oBAAA,OAAMpG,SAAS,CAAC,sCAAsC,CAAC,GAAGoG,MAAG;kBAAA;gBAAE,CACzE,CAAC,EACFzJ,IAAA,CAACZ,gBAAgB;kBACfsK,OAAO,EAAE,SAAAA,QAAA,EAAM;oBACb/H,qBAAqB,CAAC,mBAAmB,CAAC;oBAC1CI,gBAAgB,CAAC,sCAAsC,CAAC;oBACxDiE,cAAc,CAAC,CAAC;oBAEhB,IAAI,sCAAsC,CAAC6D,QAAQ,CAAC,GAAG,CAAC,EAAE;sBACxD,IAAMC,QAAQ,GAAG,sCAAsC,CAACxC,KAAK,CAAC,GAAG,CAAC,CAACyC,GAAG,CAAC,CAAC;sBACxEnF,oBAAoB,CAACkF,QAAQ,CAAC;oBAChC,CAAC,MAAM;sBACLlF,oBAAoB,CAAC,sCAAsC,CAAC;oBAC9D;kBACF,CAAE;kBACF+E,aAAa,EAAE,GAAI;kBACnB1B,KAAK,EAAE3E,MAAM,CAACsG,gBAAiB;kBAAA5B,QAAA,EAE/BhI,IAAA,CAACL,YAAY,IAAE;gBAAC,CACA,CAAC;cAAA,CACf;YAAC,CACH;UAAC,CACH,CAAC,EAGN,CAAC4G,MAAM,CAAC,wCAAwC,CAAC,IAAIvG,IAAA,CAAChB,IAAI;YACzD0J,MAAM,EAAE,qDAAsD;YAC9DT,KAAK,EAAE3E,MAAM,CAACqF,QAAS;YAAAX,QAAA,EAEvBhI,IAAA,CAAChB,IAAI;cAACiJ,KAAK,EAAE3E,MAAM,CAACuF,YAAa;cAAAb,QAAA,EAC/B9H,KAAA,CAAClB,IAAI;gBACHiJ,KAAK,EAAE,CACL3E,MAAM,CAACwF,YAAY,EACnB5G,WAAW,KAAK,iCAAiC,GAAGoB,MAAM,CAACpB,WAAW,GAAG,IAAI,CAC7E;gBAAA8F,QAAA,GAEFhI,IAAA,CAACV,SAAS;kBACRoJ,MAAM,EAAE,sDAAuD;kBAC/DT,KAAK,EAAE,CACL3E,MAAM,CAAC4D,KAAK,EACZX,MAAM,CAAC,iCAAiC,CAAC,KAAKzF,aAAa,CAAC,iCAAiC,CAAC,GAC1FwC,MAAM,CAACyF,UAAU,GACjB,IAAI,CACR;kBACFC,KAAK,EAAE,eAAgB;kBACvBC,IAAI,EAAE,iCAAkC;kBACxCC,YAAY,EAAEX,YAAY,CAAC,iCAAiC,CAAE;kBAC9D9D,KAAK,EAAE8B,MAAM,CAAC,iCAAiC,CAAE;kBACjD4C,MAAM,EAAEb,YAAa;kBACrBc,OAAO,EAAE,SAAAA,QAAA;oBAAA,OAAMjD,gBAAgB,CAAC,iCAAiC,CAAC;kBAAA,CAAC;kBACnEkD,QAAQ,EAAE,IAAK;kBACfC,cAAc,EAAC,aAAa;kBAC5BC,cAAc,EAAE;oBACdC,OAAO,EAAE;kBACX,CAAE;kBACFL,MAAM,EAAE/C,eAAgB;kBACxBqD,GAAG,EAAE,SAAAA,IAACA,MAAG;oBAAA,OAAMpG,SAAS,CAAC,iCAAiC,CAAC,GAAGoG,MAAG;kBAAA;gBAAE,CACpE,CAAC,EACFzJ,IAAA,CAACZ,gBAAgB;kBACfsK,OAAO,EAAE,SAAAA,QAAA;oBAAA,OAAMlE,oBAAoB,CAAC,iCAAiC,CAAC;kBAAA,CAAC;kBACvEmE,aAAa,EAAE,GAAI;kBACnB1B,KAAK,EAAE3E,MAAM,CAACsG,gBAAiB;kBAAA5B,QAAA,EAE/BhI,IAAA,CAACN,QAAQ,IAAE;gBAAC,CACI,CAAC;cAAA,CACf;YAAC,CACH;UAAC,CACH,CAAC,EAGN,CAAC6G,MAAM,CAAC,uCAAuC,CAAC,IAAIvG,IAAA,CAAChB,IAAI;YACxD0J,MAAM,EAAE,oDAAqD;YAC7DT,KAAK,EAAE3E,MAAM,CAACqF,QAAS;YAAAX,QAAA,EAEvBhI,IAAA,CAAChB,IAAI;cAACiJ,KAAK,EAAE3E,MAAM,CAACuF,YAAa;cAAAb,QAAA,EAC/B9H,KAAA,CAAClB,IAAI;gBACHiJ,KAAK,EAAE,CACL3E,MAAM,CAACwF,YAAY,EACnB5G,WAAW,KAAK,gCAAgC,GAAGoB,MAAM,CAACpB,WAAW,GAAG,IAAI,CAC5E;gBAAA8F,QAAA,GAEFhI,IAAA,CAACV,SAAS;kBACRoJ,MAAM,EAAE,uDAAwD;kBAChET,KAAK,EAAE,CACL3E,MAAM,CAAC4D,KAAK,EACZX,MAAM,CAAC,gCAAgC,CAAC,KAAKzF,aAAa,CAAC,gCAAgC,CAAC,GACxFwC,MAAM,CAACyF,UAAU,GACjB,IAAI,CACR;kBACFC,KAAK,EAAE,YAAa;kBACpBC,IAAI,EAAE,gCAAiC;kBACvCxE,KAAK,EAAE3B,cAAc,CAAC,gCAAgC,CAAC,IAAIyD,MAAM,CAAC,gCAAgC,CAAE;kBACpG6C,OAAO,EAAE,SAAAA,QAAA;oBAAA,OAAMjD,gBAAgB,CAAC,gCAAgC,CAAC;kBAAA,CAAC;kBAClEkD,QAAQ,EAAE,IAAK;kBACfC,cAAc,EAAC,aAAa;kBAC5BC,cAAc,EAAE;oBACdC,OAAO,EAAE;kBACX,CAAE;kBACFL,MAAM,EAAE/C,eAAgB;kBACxBqD,GAAG,EAAE,SAAAA,IAACA,MAAG;oBAAA,OAAMpG,SAAS,CAAC,gCAAgC,CAAC,GAAGoG,MAAG;kBAAA;gBAAE,CACnE,CAAC,EACFzJ,IAAA,CAACZ,gBAAgB;kBACfsK,OAAO,EAAE,SAAAA,QAAA,EAAM;oBACb/H,qBAAqB,CAAC,YAAY,CAAC;oBACnCI,gBAAgB,CAAC,gCAAgC,CAAC;oBAClDiE,cAAc,CAAC,CAAC;oBAEhB,IAAI,gCAAgC,CAAC6D,QAAQ,CAAC,GAAG,CAAC,EAAE;sBAClD,IAAMC,QAAQ,GAAG,gCAAgC,CAACxC,KAAK,CAAC,GAAG,CAAC,CAACyC,GAAG,CAAC,CAAC;sBAClEnF,oBAAoB,CAACkF,QAAQ,CAAC;oBAChC,CAAC,MAAM;sBACLlF,oBAAoB,CAAC,gCAAgC,CAAC;oBACxD;kBACF,CAAE;kBACF+E,aAAa,EAAE,GAAI;kBACnB1B,KAAK,EAAE3E,MAAM,CAACsG,gBAAiB;kBAAA5B,QAAA,EAE/BhI,IAAA,CAACL,YAAY,IAAE;gBAAC,CACA,CAAC;cAAA,CACf;YAAC,CACH;UAAC,CACH,CAAC,EAGN,CAAC4G,MAAM,CAAC,qCAAqC,CAAC,IAAIvG,IAAA,CAAChB,IAAI;YACtD0J,MAAM,EAAE,kDAAmD;YAC3DT,KAAK,EAAE3E,MAAM,CAACqF,QAAS;YAAAX,QAAA,EAEvBhI,IAAA,CAAChB,IAAI;cAACiJ,KAAK,EAAE3E,MAAM,CAACuF,YAAa;cAAAb,QAAA,EAC/B9H,KAAA,CAAClB,IAAI;gBACHiJ,KAAK,EAAE,CACL3E,MAAM,CAACwF,YAAY,EACnB5G,WAAW,KAAK,8BAA8B,GAAGoB,MAAM,CAACpB,WAAW,GAAG,IAAI,CAC1E;gBAAA8F,QAAA,GAEFhI,IAAA,CAACV,SAAS;kBACRoJ,MAAM,EAAE,mDAAoD;kBAC5DT,KAAK,EAAE,CACL3E,MAAM,CAAC4D,KAAK,EACZX,MAAM,CAAC,8BAA8B,CAAC,KAAKzF,aAAa,CAAC,8BAA8B,CAAC,GACpFwC,MAAM,CAACyF,UAAU,GACjB,IAAI,CACR;kBACFC,KAAK,EAAE,eAAgB;kBACvBC,IAAI,EAAE,8BAA+B;kBACrCC,YAAY,EAAEX,YAAY,CAAC,8BAA8B,CAAE;kBAC3D9D,KAAK,EAAE8B,MAAM,CAAC,8BAA8B,CAAE;kBAC9C4C,MAAM,EAAEb,YAAa;kBACrBc,OAAO,EAAE,SAAAA,QAAA;oBAAA,OAAMjD,gBAAgB,CAAC,8BAA8B,CAAC;kBAAA,CAAC;kBAChEkD,QAAQ,EAAE,IAAK;kBACfC,cAAc,EAAC,aAAa;kBAC5BC,cAAc,EAAE;oBACdC,OAAO,EAAE;kBACX,CAAE;kBACFL,MAAM,EAAE/C,eAAgB;kBACxBqD,GAAG,EAAE,SAAAA,IAACA,MAAG;oBAAA,OAAMpG,SAAS,CAAC,8BAA8B,CAAC,GAAGoG,MAAG;kBAAA;gBAAE,CACjE,CAAC,EACFzJ,IAAA,CAACZ,gBAAgB;kBACfsK,OAAO,EAAE,SAAAA,QAAA;oBAAA,OAAMlE,oBAAoB,CAAC,8BAA8B,CAAC;kBAAA,CAAC;kBACpEmE,aAAa,EAAE,GAAI;kBACnB1B,KAAK,EAAE3E,MAAM,CAACsG,gBAAiB;kBAAA5B,QAAA,EAE/BhI,IAAA,CAACN,QAAQ,IAAE;gBAAC,CACI,CAAC;cAAA,CACf;YAAC,CACH;UAAC,CACH,CAAC,EAGPM,IAAA,CAAChB,IAAI;YAACiJ,KAAK,EAAE3E,MAAM,CAAC0G,mBAAoB;YAAAhC,QAAA,EACtChI,IAAA,CAACd,MAAM;cAAC+K,KAAK,EAAC,cAAc;cAACP,OAAO,EAAEpB;YAAa,CAAE;UAAC,CAClD,CAAC;QAAA,CACP,CAAC;MAEP;IAAC,CACK,CAAC,EAETtI,IAAA,CAACT,KAAK;MACJ2K,SAAS,EAAE5H,iBAAkB;MAC7B6H,eAAe,EAAE,SAAAA,gBAAA,EAAM;QACrBnE,cAAc,CAAC,CAAC;QAChBrE,qBAAqB,CAAC,EAAE,CAAC;QACzBI,gBAAgB,CAAC,EAAE,CAAC;QACpBY,kBAAkB,CAAC,IAAI,CAAC;MAC1B,CAAE;MACFyH,eAAe,EAAE,GAAI;MACrBC,WAAW,EAAC,WAAW;MACvBC,YAAY,EAAC,cAAc;MAC3BrC,KAAK,EAAE3E,MAAM,CAACiH,eAAgB;MAAAvC,QAAA,EAG9B9H,KAAA,CAAClB,IAAI;QAACiJ,KAAK,EAAE,CAAC3E,MAAM,CAACkH,iBAAiB,EAAC;UAAEC,MAAM,EAAExE,YAAY,CAAC;QAAE,CAAC,CAAE;QAAA+B,QAAA,GAEjEhI,IAAA,CAACf,IAAI;UAACgJ,KAAK,EAAE3E,MAAM,CAACoH,aAAc;UAAA1C,QAAA,EAAEtG;QAAkB,CAAO,CAAC,EAC9D1B,IAAA,CAACb,UAAU;UAAGwL,4BAA4B,EAAE,KAAM;UAAA3C,QAAA,EACjDtF,eAAe,GACdA,eAAe,CAACkI,GAAG,CAAC,UAACC,IAAI,EAAEC,KAAK;YAAA,OAC9B9K,IAAA,CAACZ,gBAAgB;cAEfsK,OAAO,EAAE,SAAAA,QAAA,EAAM;gBACbhE,kBAAkB,CAAC5D,aAAa,EAAE+I,IAAI,CAACpG,KAAK,CAAC;cAC/C,CAAE;cACFkF,aAAa,EAAE,GAAI;cAAA3B,QAAA,EAGlB5E,SAAS,CAACuC,OAAO,CAACoF,aAAa,CAACjJ,aAAa,CAAC,CAAC2C,KAAK,KAAKoG,IAAI,CAACpG,KAAK,GAAGvE,KAAA,CAAClB,IAAI;gBAACiJ,KAAK,EAAE3E,MAAM,CAAC0H,YAAa;gBAAAhD,QAAA,GACtGhI,IAAA,CAACf,IAAI;kBAAA+I,QAAA,EAAE6C,IAAI,CAACpG;gBAAK,CAAO,CAAC,EACzBzE,IAAA,CAACJ,QAAQ,IAAE,CAAC;cAAA,CACR,CAAC,GACPI,IAAA,CAAChB,IAAI;gBAACiJ,KAAK,EAAE3E,MAAM,CAAC2H,YAAa;gBAAAjD,QAAA,EAC/BhI,IAAA,CAACf,IAAI;kBAAA+I,QAAA,EAAE6C,IAAI,CAACpG;gBAAK,CAAO;cAAC,CACrB;YAAC,GAbFqG,KAcW,CAAC;UAAA,CACpB,CAAC,GAEF9K,IAAA,CAACf,IAAI;YAAA+I,QAAA,EAAC;UAAe,CAAM;QAC5B,CACW,CAAC;MAAA,CACT;IAAC,CACF,CAAC;EAAA,CACE,CAAC;AAEjB,CAAC;AAED,eAAe3H,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}