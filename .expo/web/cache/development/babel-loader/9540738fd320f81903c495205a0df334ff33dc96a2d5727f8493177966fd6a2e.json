{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { hasOwnProperty, isNumber, isObject, isString, isUndefined, isIOS } from '@react-native-firebase/app/lib/common';\nimport Value from \"./RemoteConfigValue\";\nimport { createModuleNamespace, FirebaseModule, getFirebaseRoot } from '@react-native-firebase/app/lib/internal';\nimport version from \"./version\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport { getRemoteConfig, activate, ensureInitialized, fetchAndActivate, fetchConfig, getAll, getBoolean, getNumber, getString, getValue, setLogLevel, isSupported, fetchTimeMillis, settings, lastFetchStatus, reset, setConfigSettings, fetch, setDefaults, setDefaultsFromResource, onConfigUpdated } from \"./modular/index\";\nvar statics = {\n  LastFetchStatus: {\n    SUCCESS: 'success',\n    FAILURE: 'failure',\n    THROTTLED: 'throttled',\n    NO_FETCH_YET: 'no_fetch_yet'\n  },\n  ValueSource: {\n    REMOTE: 'remote',\n    DEFAULT: 'default',\n    STATIC: 'static'\n  }\n};\nvar namespace = 'remoteConfig';\nvar nativeModuleName = 'RNFBConfigModule';\nvar FirebaseConfigModule = function (_FirebaseModule) {\n  _inherits(FirebaseConfigModule, _FirebaseModule);\n  var _super = _createSuper(FirebaseConfigModule);\n  function FirebaseConfigModule() {\n    var _this;\n    _classCallCheck(this, FirebaseConfigModule);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this._settings = {\n      fetchTimeMillis: 60000,\n      minimumFetchIntervalMillis: 43200000\n    };\n    _this._lastFetchTime = -1;\n    _this._values = {};\n    _this._isWeb = Platform.OS !== 'ios' && Platform.OS !== 'android';\n    _this._configUpdateListenerCount = 0;\n    return _this;\n  }\n  _createClass(FirebaseConfigModule, [{\n    key: \"defaultConfig\",\n    get: function get() {\n      var _this2 = this;\n      var updatedDefaultConfig = {};\n      Object.keys(this._values).forEach(function (key) {\n        updatedDefaultConfig[key] = _this2._values[key].value;\n      });\n      return updatedDefaultConfig;\n    },\n    set: function set(defaults) {\n      if (!isObject(defaults)) {\n        throw new Error(\"firebase.remoteConfig().defaultConfig: 'defaults' must be an object.\");\n      }\n      this._updateFromConstants(defaults);\n      this.setDefaults.call(this, defaults, true);\n    }\n  }, {\n    key: \"settings\",\n    get: function get() {\n      return this._settings;\n    },\n    set: function set(settings) {\n      this._updateFromConstants(settings);\n      this.setConfigSettings.call(this, settings, true);\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(key) {\n      if (!isString(key)) {\n        throw new Error(\"firebase.remoteConfig().getValue(): 'key' must be a string value.\");\n      }\n      if (typeof this._values === 'undefined' || !hasOwnProperty(this._values, key)) {\n        return new Value({\n          value: '',\n          source: 'static'\n        });\n      }\n      return new Value({\n        value: `${this._values[key].value}`,\n        source: this._values[key].source\n      });\n    }\n  }, {\n    key: \"getBoolean\",\n    value: function getBoolean(key) {\n      return this.getValue(key).asBoolean();\n    }\n  }, {\n    key: \"getNumber\",\n    value: function getNumber(key) {\n      return this.getValue(key).asNumber();\n    }\n  }, {\n    key: \"getString\",\n    value: function getString(key) {\n      return this.getValue(key).asString();\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      var _this3 = this;\n      var values = {};\n      Object.keys(this._values).forEach(function (key) {\n        return values[key] = _this3.getValue(key);\n      });\n      return values;\n    }\n  }, {\n    key: \"fetchTimeMillis\",\n    get: function get() {\n      return this._lastFetchTime;\n    }\n  }, {\n    key: \"lastFetchStatus\",\n    get: function get() {\n      return this._lastFetchStatus;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      if (isIOS) {\n        return Promise.resolve(null);\n      }\n      return this._promiseWithConstants(this.native.reset());\n    }\n  }, {\n    key: \"setConfigSettings\",\n    value: function setConfigSettings(settings) {\n      var updatedSettings = {};\n      if (this._isWeb) {\n        updatedSettings.fetchTimeMillis = this._settings.fetchTimeMillis;\n        updatedSettings.minimumFetchIntervalMillis = this._settings.minimumFetchIntervalMillis;\n      } else {\n        updatedSettings.fetchTimeout = this._settings.fetchTimeMillis / 1000;\n        updatedSettings.minimumFetchInterval = this._settings.minimumFetchIntervalMillis / 1000;\n      }\n      var apiCalled = arguments[1] == true ? 'settings' : 'setConfigSettings';\n      if (!isObject(settings)) {\n        throw new Error(`firebase.remoteConfig().${apiCalled}(*): settings must set an object.`);\n      }\n      if (hasOwnProperty(settings, 'minimumFetchIntervalMillis')) {\n        if (!isNumber(settings.minimumFetchIntervalMillis)) {\n          throw new Error(`firebase.remoteConfig().${apiCalled}(): 'settings.minimumFetchIntervalMillis' must be a number type in milliseconds.`);\n        } else {\n          if (this._isWeb) {\n            updatedSettings.minimumFetchIntervalMillis = settings.minimumFetchIntervalMillis;\n          } else {\n            updatedSettings.minimumFetchInterval = settings.minimumFetchIntervalMillis / 1000;\n          }\n        }\n      }\n      if (hasOwnProperty(settings, 'fetchTimeMillis')) {\n        if (!isNumber(settings.fetchTimeMillis)) {\n          throw new Error(`firebase.remoteConfig().${apiCalled}(): 'settings.fetchTimeMillis' must be a number type in milliseconds.`);\n        } else {\n          if (this._isWeb) {\n            updatedSettings.fetchTimeMillis = settings.fetchTimeMillis;\n          } else {\n            updatedSettings.fetchTimeout = settings.fetchTimeMillis / 1000;\n          }\n        }\n      }\n      return this._promiseWithConstants(this.native.setConfigSettings(updatedSettings));\n    }\n  }, {\n    key: \"activate\",\n    value: function activate() {\n      return this._promiseWithConstants(this.native.activate());\n    }\n  }, {\n    key: \"fetch\",\n    value: function fetch(expirationDurationSeconds) {\n      if (!isUndefined(expirationDurationSeconds) && !isNumber(expirationDurationSeconds)) {\n        throw new Error(\"firebase.remoteConfig().fetch(): 'expirationDurationSeconds' must be a number value.\");\n      }\n      return this._promiseWithConstants(this.native.fetch(expirationDurationSeconds !== undefined ? expirationDurationSeconds : -1));\n    }\n  }, {\n    key: \"fetchAndActivate\",\n    value: function fetchAndActivate() {\n      return this._promiseWithConstants(this.native.fetchAndActivate());\n    }\n  }, {\n    key: \"ensureInitialized\",\n    value: function ensureInitialized() {\n      return this._promiseWithConstants(this.native.ensureInitialized());\n    }\n  }, {\n    key: \"setDefaults\",\n    value: function setDefaults(defaults) {\n      var apiCalled = arguments[1] === true ? 'defaultConfig' : 'setDefaults';\n      if (!isObject(defaults)) {\n        throw new Error(`firebase.remoteConfig().${apiCalled}(): 'defaults' must be an object.`);\n      }\n      return this._promiseWithConstants(this.native.setDefaults(defaults));\n    }\n  }, {\n    key: \"setDefaultsFromResource\",\n    value: function setDefaultsFromResource(resourceName) {\n      if (!isString(resourceName)) {\n        throw new Error(\"firebase.remoteConfig().setDefaultsFromResource(): 'resourceName' must be a string value.\");\n      }\n      return this._promiseWithConstants(this.native.setDefaultsFromResource(resourceName));\n    }\n  }, {\n    key: \"onConfigUpdated\",\n    value: function onConfigUpdated(listenerOrObserver) {\n      var _this4 = this;\n      var listener = this._parseListener(listenerOrObserver);\n      var unsubscribed = false;\n      var subscription = this.emitter.addListener(this.eventNameForApp('on_config_updated'), function (event) {\n        var resultType = event.resultType;\n        if (resultType === 'success') {\n          listener({\n            updatedKeys: event.updatedKeys\n          }, undefined);\n          return;\n        }\n        listener(undefined, {\n          code: event.code,\n          message: event.message,\n          nativeErrorMessage: event.nativeErrorMessage\n        });\n      });\n      if (this._configUpdateListenerCount === 0) {\n        this.native.onConfigUpdated();\n      }\n      this._configUpdateListenerCount++;\n      return function () {\n        if (unsubscribed) {\n          return;\n        } else {\n          unsubscribed = true;\n        }\n        subscription.remove();\n        _this4._configUpdateListenerCount--;\n        if (_this4._configUpdateListenerCount === 0) {\n          _this4.native.removeConfigUpdateRegistration();\n        }\n      };\n    }\n  }, {\n    key: \"_parseListener\",\n    value: function _parseListener(listenerOrObserver) {\n      return typeof listenerOrObserver === 'object' ? listenerOrObserver.next.bind(listenerOrObserver) : listenerOrObserver;\n    }\n  }, {\n    key: \"_updateFromConstants\",\n    value: function _updateFromConstants(constants) {\n      if (constants.lastFetchTime) {\n        this._lastFetchTime = constants.lastFetchTime;\n      }\n      if (constants.lastFetchStatus) {\n        this._lastFetchStatus = constants.lastFetchStatus;\n      }\n      if (this._isWeb) {\n        this._settings = {\n          fetchTimeMillis: constants.fetchTimeMillis,\n          minimumFetchIntervalMillis: constants.minimumFetchIntervalMillis\n        };\n      } else {\n        this._settings = {\n          fetchTimeMillis: constants.fetchTimeout * 1000,\n          minimumFetchIntervalMillis: constants.minimumFetchInterval * 1000\n        };\n      }\n      this._values = Object.freeze(constants.values);\n    }\n  }, {\n    key: \"_promiseWithConstants\",\n    value: function _promiseWithConstants(promise) {\n      var _this5 = this;\n      return promise.then(function (_ref) {\n        var result = _ref.result,\n          constants = _ref.constants;\n        _this5._updateFromConstants(constants);\n        return result;\n      });\n    }\n  }]);\n  return FirebaseConfigModule;\n}(FirebaseModule);\nexport var SDK_VERSION = version;\nexport default createModuleNamespace({\n  statics: statics,\n  version: version,\n  namespace: namespace,\n  nativeModuleName: nativeModuleName,\n  nativeEvents: ['on_config_updated'],\n  hasMultiAppSupport: true,\n  hasCustomUrlOrRegionSupport: false,\n  ModuleClass: FirebaseConfigModule\n});\nexport var firebase = getFirebaseRoot();","map":{"version":3,"names":["hasOwnProperty","isNumber","isObject","isString","isUndefined","isIOS","Value","createModuleNamespace","FirebaseModule","getFirebaseRoot","version","Platform","getRemoteConfig","activate","ensureInitialized","fetchAndActivate","fetchConfig","getAll","getBoolean","getNumber","getString","getValue","setLogLevel","isSupported","fetchTimeMillis","settings","lastFetchStatus","reset","setConfigSettings","fetch","setDefaults","setDefaultsFromResource","onConfigUpdated","statics","LastFetchStatus","SUCCESS","FAILURE","THROTTLED","NO_FETCH_YET","ValueSource","REMOTE","DEFAULT","STATIC","namespace","nativeModuleName","FirebaseConfigModule","_FirebaseModule","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","_settings","minimumFetchIntervalMillis","_lastFetchTime","_values","_isWeb","OS","_configUpdateListenerCount","_createClass","key","get","_this2","updatedDefaultConfig","Object","keys","forEach","value","set","defaults","Error","_updateFromConstants","source","asBoolean","asNumber","asString","_this3","values","_lastFetchStatus","Promise","resolve","_promiseWithConstants","native","updatedSettings","fetchTimeout","minimumFetchInterval","apiCalled","expirationDurationSeconds","undefined","resourceName","listenerOrObserver","_this4","listener","_parseListener","unsubscribed","subscription","emitter","addListener","eventNameForApp","event","resultType","updatedKeys","code","message","nativeErrorMessage","remove","removeConfigUpdateRegistration","next","bind","constants","lastFetchTime","freeze","promise","_this5","then","_ref","result","SDK_VERSION","nativeEvents","hasMultiAppSupport","hasCustomUrlOrRegionSupport","ModuleClass","firebase"],"sources":["/Users/sharmalperera/projects/apps/ExpoTemplateAppWithComponent/node_modules/@react-native-firebase/remote-config/lib/index.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  hasOwnProperty,\n  isNumber,\n  isObject,\n  isString,\n  isUndefined,\n  isIOS,\n} from '@react-native-firebase/app/lib/common';\nimport Value from './RemoteConfigValue';\nimport {\n  createModuleNamespace,\n  FirebaseModule,\n  getFirebaseRoot,\n} from '@react-native-firebase/app/lib/internal';\nimport version from './version';\nimport { Platform } from 'react-native';\n\nexport {\n  getRemoteConfig,\n  activate,\n  ensureInitialized,\n  fetchAndActivate,\n  fetchConfig,\n  getAll,\n  getBoolean,\n  getNumber,\n  getString,\n  getValue,\n  setLogLevel,\n  isSupported,\n  fetchTimeMillis,\n  settings,\n  lastFetchStatus,\n  reset,\n  setConfigSettings,\n  fetch,\n  setDefaults,\n  setDefaultsFromResource,\n  onConfigUpdated,\n} from './modular/index';\n\nconst statics = {\n  LastFetchStatus: {\n    SUCCESS: 'success',\n    FAILURE: 'failure',\n    THROTTLED: 'throttled',\n    NO_FETCH_YET: 'no_fetch_yet',\n  },\n  ValueSource: {\n    REMOTE: 'remote',\n    DEFAULT: 'default',\n    STATIC: 'static',\n  },\n};\n\nconst namespace = 'remoteConfig';\nconst nativeModuleName = 'RNFBConfigModule';\n\nclass FirebaseConfigModule extends FirebaseModule {\n  constructor(...args) {\n    super(...args);\n    this._settings = {\n      // defaults to 1 minute.\n      fetchTimeMillis: 60000,\n      // defaults to 12 hours.\n      minimumFetchIntervalMillis: 43200000,\n    };\n    this._lastFetchTime = -1;\n    this._values = {};\n    this._isWeb = Platform.OS !== 'ios' && Platform.OS !== 'android';\n    this._configUpdateListenerCount = 0;\n  }\n\n  get defaultConfig() {\n    const updatedDefaultConfig = {};\n    Object.keys(this._values).forEach(key => {\n      // Need to make it an object with key and literal value. Not `Value` instance.\n      updatedDefaultConfig[key] = this._values[key].value;\n    });\n\n    return updatedDefaultConfig;\n  }\n\n  set defaultConfig(defaults) {\n    if (!isObject(defaults)) {\n      throw new Error(\"firebase.remoteConfig().defaultConfig: 'defaults' must be an object.\");\n    }\n    // To make Firebase web v9 API compatible, we update the config first so it immediately\n    // updates defaults on the instance. We then pass to underlying SDK to update. We do this because\n    // there is no way to \"await\" a setter.\n    this._updateFromConstants(defaults);\n    this.setDefaults.call(this, defaults, true);\n  }\n\n  get settings() {\n    return this._settings;\n  }\n\n  set settings(settings) {\n    // To make Firebase web v9 API compatible, we update the settings first so it immediately\n    // updates settings on the instance. We then pass to underlying SDK to update. We do this because\n    // there is no way to \"await\" a setter. We can't delegate to `setConfigSettings()` as it is setup\n    // for native.\n    this._updateFromConstants(settings);\n    this.setConfigSettings.call(this, settings, true);\n  }\n\n  getValue(key) {\n    if (!isString(key)) {\n      throw new Error(\"firebase.remoteConfig().getValue(): 'key' must be a string value.\");\n    }\n\n    if (typeof this._values === 'undefined' || !hasOwnProperty(this._values, key)) {\n      return new Value({\n        value: '',\n        source: 'static',\n      });\n    }\n\n    return new Value({ value: `${this._values[key].value}`, source: this._values[key].source });\n  }\n\n  getBoolean(key) {\n    return this.getValue(key).asBoolean();\n  }\n\n  getNumber(key) {\n    return this.getValue(key).asNumber();\n  }\n\n  getString(key) {\n    return this.getValue(key).asString();\n  }\n\n  getAll() {\n    const values = {};\n    Object.keys(this._values).forEach(key => (values[key] = this.getValue(key)));\n    return values;\n  }\n\n  get fetchTimeMillis() {\n    // android returns -1 if no fetch yet and iOS returns 0\n    return this._lastFetchTime;\n  }\n\n  get lastFetchStatus() {\n    return this._lastFetchStatus;\n  }\n\n  /**\n   * Deletes all activated, fetched and defaults configs and resets all Firebase Remote Config settings.\n   * @returns {Promise<null>}\n   */\n  reset() {\n    if (isIOS) {\n      return Promise.resolve(null);\n    }\n\n    return this._promiseWithConstants(this.native.reset());\n  }\n\n  setConfigSettings(settings) {\n    const updatedSettings = {};\n    if (this._isWeb) {\n      updatedSettings.fetchTimeMillis = this._settings.fetchTimeMillis;\n      updatedSettings.minimumFetchIntervalMillis = this._settings.minimumFetchIntervalMillis;\n    } else {\n      //iOS & Android expect seconds & different property names\n      updatedSettings.fetchTimeout = this._settings.fetchTimeMillis / 1000;\n      updatedSettings.minimumFetchInterval = this._settings.minimumFetchIntervalMillis / 1000;\n    }\n    const apiCalled = arguments[1] == true ? 'settings' : 'setConfigSettings';\n    if (!isObject(settings)) {\n      throw new Error(`firebase.remoteConfig().${apiCalled}(*): settings must set an object.`);\n    }\n\n    if (hasOwnProperty(settings, 'minimumFetchIntervalMillis')) {\n      if (!isNumber(settings.minimumFetchIntervalMillis)) {\n        throw new Error(\n          `firebase.remoteConfig().${apiCalled}(): 'settings.minimumFetchIntervalMillis' must be a number type in milliseconds.`,\n        );\n      } else {\n        if (this._isWeb) {\n          updatedSettings.minimumFetchIntervalMillis = settings.minimumFetchIntervalMillis;\n        } else {\n          updatedSettings.minimumFetchInterval = settings.minimumFetchIntervalMillis / 1000;\n        }\n      }\n    }\n\n    if (hasOwnProperty(settings, 'fetchTimeMillis')) {\n      if (!isNumber(settings.fetchTimeMillis)) {\n        throw new Error(\n          `firebase.remoteConfig().${apiCalled}(): 'settings.fetchTimeMillis' must be a number type in milliseconds.`,\n        );\n      } else {\n        if (this._isWeb) {\n          updatedSettings.fetchTimeMillis = settings.fetchTimeMillis;\n        } else {\n          updatedSettings.fetchTimeout = settings.fetchTimeMillis / 1000;\n        }\n      }\n    }\n\n    return this._promiseWithConstants(this.native.setConfigSettings(updatedSettings));\n  }\n\n  /**\n   * Activates the Fetched RemoteConfig, so that the fetched key-values take effect.\n   * @returns {Promise<boolean>}\n   */\n  activate() {\n    return this._promiseWithConstants(this.native.activate());\n  }\n\n  /**\n   * Fetches parameter values for your app.\n\n   * @param {number} expirationDurationSeconds\n   * @returns {Promise}\n   */\n  fetch(expirationDurationSeconds) {\n    if (!isUndefined(expirationDurationSeconds) && !isNumber(expirationDurationSeconds)) {\n      throw new Error(\n        \"firebase.remoteConfig().fetch(): 'expirationDurationSeconds' must be a number value.\",\n      );\n    }\n\n    return this._promiseWithConstants(\n      this.native.fetch(expirationDurationSeconds !== undefined ? expirationDurationSeconds : -1),\n    );\n  }\n\n  fetchAndActivate() {\n    return this._promiseWithConstants(this.native.fetchAndActivate());\n  }\n\n  ensureInitialized() {\n    return this._promiseWithConstants(this.native.ensureInitialized());\n  }\n\n  /**\n   * Sets defaults.\n   *\n   * @param {object} defaults\n   */\n  setDefaults(defaults) {\n    const apiCalled = arguments[1] === true ? 'defaultConfig' : 'setDefaults';\n    if (!isObject(defaults)) {\n      throw new Error(`firebase.remoteConfig().${apiCalled}(): 'defaults' must be an object.`);\n    }\n\n    return this._promiseWithConstants(this.native.setDefaults(defaults));\n  }\n\n  /**\n   * Sets defaults based on resource.\n   * @param {string} resourceName\n   */\n  setDefaultsFromResource(resourceName) {\n    if (!isString(resourceName)) {\n      throw new Error(\n        \"firebase.remoteConfig().setDefaultsFromResource(): 'resourceName' must be a string value.\",\n      );\n    }\n\n    return this._promiseWithConstants(this.native.setDefaultsFromResource(resourceName));\n  }\n\n  /**\n   * Registers a listener to changes in the configuration.\n   *\n   * @param listenerOrObserver - function called on config change\n   * @returns {function} unsubscribe listener\n   */\n  onConfigUpdated(listenerOrObserver) {\n    const listener = this._parseListener(listenerOrObserver);\n    let unsubscribed = false;\n    const subscription = this.emitter.addListener(\n      this.eventNameForApp('on_config_updated'),\n      event => {\n        const { resultType } = event;\n        if (resultType === 'success') {\n          listener({ updatedKeys: event.updatedKeys }, undefined);\n          return;\n        }\n\n        listener(undefined, {\n          code: event.code,\n          message: event.message,\n          nativeErrorMessage: event.nativeErrorMessage,\n        });\n      },\n    );\n    if (this._configUpdateListenerCount === 0) {\n      this.native.onConfigUpdated();\n    }\n\n    this._configUpdateListenerCount++;\n\n    return () => {\n      if (unsubscribed) {\n        // there is no harm in calling this multiple times to unsubscribe,\n        // but anything after the first call is a no-op\n        return;\n      } else {\n        unsubscribed = true;\n      }\n      subscription.remove();\n      this._configUpdateListenerCount--;\n      if (this._configUpdateListenerCount === 0) {\n        this.native.removeConfigUpdateRegistration();\n      }\n    };\n  }\n\n  _parseListener(listenerOrObserver) {\n    return typeof listenerOrObserver === 'object'\n      ? listenerOrObserver.next.bind(listenerOrObserver)\n      : listenerOrObserver;\n  }\n\n  _updateFromConstants(constants) {\n    // Wrapped this as we update using sync getters initially for `defaultConfig` & `settings`\n    if (constants.lastFetchTime) {\n      this._lastFetchTime = constants.lastFetchTime;\n    }\n\n    // Wrapped this as we update using sync getters initially for `defaultConfig` & `settings`\n    if (constants.lastFetchStatus) {\n      this._lastFetchStatus = constants.lastFetchStatus;\n    }\n\n    if (this._isWeb) {\n      this._settings = {\n        fetchTimeMillis: constants.fetchTimeMillis,\n        minimumFetchIntervalMillis: constants.minimumFetchIntervalMillis,\n      };\n    } else {\n      this._settings = {\n        fetchTimeMillis: constants.fetchTimeout * 1000,\n        minimumFetchIntervalMillis: constants.minimumFetchInterval * 1000,\n      };\n    }\n\n    this._values = Object.freeze(constants.values);\n  }\n\n  _promiseWithConstants(promise) {\n    return promise.then(({ result, constants }) => {\n      this._updateFromConstants(constants);\n      return result;\n    });\n  }\n}\n\n// import { SDK_VERSION } from '@react-native-firebase/remote-config';\nexport const SDK_VERSION = version;\n\n// import config from '@react-native-firebase/remote-config';\n// config().X(...);\nexport default createModuleNamespace({\n  statics,\n  version,\n  namespace,\n  nativeModuleName,\n  nativeEvents: ['on_config_updated'],\n  hasMultiAppSupport: true,\n  hasCustomUrlOrRegionSupport: false,\n  ModuleClass: FirebaseConfigModule,\n});\n\n// import config, { firebase } from '@react-native-firebase/remote-config';\n// config().X(...);\n// firebase.remoteConfig().X(...);\nexport const firebase = getFirebaseRoot();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}