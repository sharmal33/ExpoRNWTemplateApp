{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport remoteConfig from '@react-native-firebase/remote-config';\nexport var getRemoteConfig = function getRemoteConfig() {\n  return remoteConfig().fetchAndActivate().then(function () {\n    var metadata = remoteConfig().getValue('LogoutTimeForInactivity');\n    if (metadata && metadata._value) {\n      return Number(metadata._value);\n    }\n    return 0;\n  }).catch(function () {\n    return 0;\n  });\n};\nexport var getEnterpriseData = function () {\n  var _ref = _asyncToGenerator(function* (keys) {\n    try {\n      yield remoteConfig().fetchAndActivate();\n      var data = [];\n      keys.forEach(function (s) {\n        var values = remoteConfig().getValue(s);\n        if (values && values.asString().length > 0) {\n          data.push(JSON.parse(values.asString()));\n        }\n      });\n      return data;\n    } catch (error) {\n      console.log('error ', error);\n    }\n  });\n  return function getEnterpriseData(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["remoteConfig","getRemoteConfig","fetchAndActivate","then","metadata","getValue","_value","Number","catch","getEnterpriseData","_ref","_asyncToGenerator","keys","data","forEach","s","values","asString","length","push","JSON","parse","error","console","log","_x","apply","arguments"],"sources":["/Users/sharmalperera/projects/apps/ExpoTemplateAppWithComponent/src/utils/screen-utils.ts"],"sourcesContent":["import { Platform, StatusBar, Dimensions, PixelRatio, NativeScrollEvent } from 'react-native';\nimport remoteConfig from '@react-native-firebase/remote-config';\n\nexport const getRemoteConfig = () => {\n  return remoteConfig()\n    .fetchAndActivate()\n    .then(() => {\n      const metadata = remoteConfig().getValue('LogoutTimeForInactivity');\n      if (metadata && metadata._value) {\n        return Number(metadata._value);\n      }\n      return 0;\n    })\n    .catch(() => {\n      return 0;\n    });\n};\n\nexport const getEnterpriseData = async (keys: string[]) => {\n  try {\n    await remoteConfig().fetchAndActivate();\n    const data: any[] | PromiseLike<any[]> = [];\n    keys.forEach((s) => {\n      const values = remoteConfig().getValue(s);\n      if (values && values.asString().length > 0) {\n        data.push(JSON.parse(values.asString()));\n      }\n    });\n    return data;\n  } catch (error) {\n    console.log('error ',error);\n  }\n\n};\n"],"mappings":";AACA,OAAOA,YAAY,MAAM,sCAAsC;AAE/D,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAeA,CAAA,EAAS;EACnC,OAAOD,YAAY,CAAC,CAAC,CAClBE,gBAAgB,CAAC,CAAC,CAClBC,IAAI,CAAC,YAAM;IACV,IAAMC,QAAQ,GAAGJ,YAAY,CAAC,CAAC,CAACK,QAAQ,CAAC,yBAAyB,CAAC;IACnE,IAAID,QAAQ,IAAIA,QAAQ,CAACE,MAAM,EAAE;MAC/B,OAAOC,MAAM,CAACH,QAAQ,CAACE,MAAM,CAAC;IAChC;IACA,OAAO,CAAC;EACV,CAAC,CAAC,CACDE,KAAK,CAAC,YAAM;IACX,OAAO,CAAC;EACV,CAAC,CAAC;AACN,CAAC;AAED,OAAO,IAAMC,iBAAiB;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,IAAc,EAAK;IACzD,IAAI;MACF,MAAMZ,YAAY,CAAC,CAAC,CAACE,gBAAgB,CAAC,CAAC;MACvC,IAAMW,IAAgC,GAAG,EAAE;MAC3CD,IAAI,CAACE,OAAO,CAAC,UAACC,CAAC,EAAK;QAClB,IAAMC,MAAM,GAAGhB,YAAY,CAAC,CAAC,CAACK,QAAQ,CAACU,CAAC,CAAC;QACzC,IAAIC,MAAM,IAAIA,MAAM,CAACC,QAAQ,CAAC,CAAC,CAACC,MAAM,GAAG,CAAC,EAAE;UAC1CL,IAAI,CAACM,IAAI,CAACC,IAAI,CAACC,KAAK,CAACL,MAAM,CAACC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC1C;MACF,CAAC,CAAC;MACF,OAAOJ,IAAI;IACb,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAACF,KAAK,CAAC;IAC7B;EAEF,CAAC;EAAA,gBAfYb,iBAAiBA,CAAAgB,EAAA;IAAA,OAAAf,IAAA,CAAAgB,KAAA,OAAAC,SAAA;EAAA;AAAA,GAe7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}