{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar _class;\nexport var MemberShipService = function () {\n  function MemberShipService() {\n    var _this = this;\n    _classCallCheck(this, MemberShipService);\n    this._memberShipClient = void 0;\n    this.initClients = function (clients) {\n      _this._memberShipClient = clients.memberShipClient;\n    };\n    this.getProfile = _asyncToGenerator(function* () {\n      try {\n        if (!_this._memberShipClient) {\n          throw new Error('Member Ship Client is not registered');\n        }\n        var response = yield _this._memberShipClient.get(`/users/me`);\n        return response.data;\n      } catch (error) {\n        throw new Error('Failed to get user profile: ' + error.message);\n      }\n    });\n    this.updateProfile = function () {\n      var _ref2 = _asyncToGenerator(function* (userId, body) {\n        try {\n          if (!_this._memberShipClient) {\n            throw new Error('MemberShip Client is not registered');\n          }\n          var response = yield _this._memberShipClient.patch(`/users/${userId}`, body);\n          return response.data;\n        } catch (error) {\n          throw new Error('Failed to update user profile: ' + error.message);\n        }\n      });\n      return function (_x, _x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    if (MemberShipService._instance) {\n      throw new Error('Error: Instantiation failed: Use MemberShipService.getInstance() instead of new.');\n    }\n    MemberShipService._instance = this;\n  }\n  _createClass(MemberShipService, null, [{\n    key: \"instance\",\n    value: function instance() {\n      return MemberShipService._instance;\n    }\n  }]);\n  return MemberShipService;\n}();\n_class = MemberShipService;\nMemberShipService._instance = new _class();","map":{"version":3,"names":["MemberShipService","_this","_classCallCheck","_memberShipClient","initClients","clients","memberShipClient","getProfile","_asyncToGenerator","Error","response","get","data","error","message","updateProfile","_ref2","userId","body","patch","_x","_x2","apply","arguments","_instance","_createClass","key","value","instance","_class"],"sources":["/Users/sharmalperera/projects/apps/ExpoTemplateAppWithComponent/node_modules/react-native-user-profile-component/src/services/MemberShipService.tsx"],"sourcesContent":["//MemberShipService\ntype MemberShipClient = any; // Replace with the appropriate AxiosInstance type\n\nexport class MemberShipService {\n    private static _instance: MemberShipService = new MemberShipService();\n    private _memberShipClient?: MemberShipClient;\n\n    private constructor() {\n        if (MemberShipService._instance) {\n            throw new Error(\n                'Error: Instantiation failed: Use MemberShipService.getInstance() instead of new.'\n            );\n        }\n        MemberShipService._instance = this;\n    }\n\n    public static instance(): MemberShipService {\n        return MemberShipService._instance;\n    }\n\n    public initClients = (clients: { memberShipClient: MemberShipClient }) => {\n        this._memberShipClient = clients.memberShipClient;\n    }\n\n    getProfile = async () => {\n        try {\n            if (!this._memberShipClient) {\n                throw new Error('Member Ship Client is not registered');\n            }\n\n            const response = await this._memberShipClient.get(`/users/me`);\n            return response.data;\n        } catch (error) {\n            throw new Error('Failed to get user profile: ' + error.message);\n        }\n    }\n\n    updateProfile = async (userId: string, body: any) => {\n        try {\n            if (!this._memberShipClient) {\n                throw new Error('MemberShip Client is not registered');\n            }\n\n            const response = await this._memberShipClient.patch(\n                `/users/${userId}`,\n                body,\n            );\n            return response.data;\n        } catch (error) {\n            throw new Error('Failed to update user profile: ' + error.message);\n        }\n    }\n}\n"],"mappings":";;;;AAGA,WAAaA,iBAAiB;EAI1B,SAAAA,kBAAA,EAAsB;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAF,iBAAA;IAAA,KAFdG,iBAAiB;IAAA,KAelBC,WAAW,GAAG,UAACC,OAA+C,EAAK;MACtEJ,KAAI,CAACE,iBAAiB,GAAGE,OAAO,CAACC,gBAAgB;IACrD,CAAC;IAAA,KAEDC,UAAU,GAAAC,iBAAA,CAAG,aAAY;MACrB,IAAI;QACA,IAAI,CAACP,KAAI,CAACE,iBAAiB,EAAE;UACzB,MAAM,IAAIM,KAAK,CAAC,sCAAsC,CAAC;QAC3D;QAEA,IAAMC,QAAQ,SAAST,KAAI,CAACE,iBAAiB,CAACQ,GAAG,CAAE,WAAU,CAAC;QAC9D,OAAOD,QAAQ,CAACE,IAAI;MACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZ,MAAM,IAAIJ,KAAK,CAAC,8BAA8B,GAAGI,KAAK,CAACC,OAAO,CAAC;MACnE;IACJ,CAAC;IAAA,KAEDC,aAAa;MAAA,IAAAC,KAAA,GAAAR,iBAAA,CAAG,WAAOS,MAAc,EAAEC,IAAS,EAAK;QACjD,IAAI;UACA,IAAI,CAACjB,KAAI,CAACE,iBAAiB,EAAE;YACzB,MAAM,IAAIM,KAAK,CAAC,qCAAqC,CAAC;UAC1D;UAEA,IAAMC,QAAQ,SAAST,KAAI,CAACE,iBAAiB,CAACgB,KAAK,CAC9C,UAASF,MAAO,EAAC,EAClBC,IACJ,CAAC;UACD,OAAOR,QAAQ,CAACE,IAAI;QACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;UACZ,MAAM,IAAIJ,KAAK,CAAC,iCAAiC,GAAGI,KAAK,CAACC,OAAO,CAAC;QACtE;MACJ,CAAC;MAAA,iBAAAM,EAAA,EAAAC,GAAA;QAAA,OAAAL,KAAA,CAAAM,KAAA,OAAAC,SAAA;MAAA;IAAA;IA3CG,IAAIvB,iBAAiB,CAACwB,SAAS,EAAE;MAC7B,MAAM,IAAIf,KAAK,CACX,kFACJ,CAAC;IACL;IACAT,iBAAiB,CAACwB,SAAS,GAAG,IAAI;EACtC;EAACC,YAAA,CAAAzB,iBAAA;IAAA0B,GAAA;IAAAC,KAAA,EAED,SAAAC,SAAA,EAA4C;MACxC,OAAO5B,iBAAiB,CAACwB,SAAS;IACtC;EAAC;EAAA,OAAAxB,iBAAA;AAAA;AAkCJ6B,MAAA,GAjDY7B,iBAAiB;AAAjBA,iBAAiB,CACXwB,SAAS,GAAsB,IAAIxB,MAAiB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}